{"ast":null,"code":"import { editChannel } from '../../../../serverApi/serverApi';\nimport { createChannel, renameChannel, deleteChannel, refreshChannel } from './channelManager';\nexport const channelOperation = (room, redrawRoom, alerts) => ({\n  create: function (channelName) {\n    const channelList = createChannel(room.channels, channelName);\n    editChannel(channelList).then(room => {\n      redrawRoom();\n    }).catch(error => {\n      console.log(error);\n      alerts.showAlert(ErrorAlert({\n        message: Locales.Errors.FailedCreateRoom,\n        alertManager: alerts\n      }));\n    });\n  },\n  rename: function (newNameChannel, renameChannelId) {\n    const channelList = renameChannel(room.channels, newNameChannel, renameChannelId);\n    editChannel(channelList).then(room => {\n      redrawRoom();\n    }).catch(error => {\n      console.log(error);\n      alerts.showAlert(ErrorAlert({\n        message: Locales.Errors.FailedCreateRoom,\n        alertManager: alerts\n      }));\n    });\n  },\n  delete: function (delChannenlId) {\n    const channelList = deleteChannel(room.channels, delChannenlId);\n    editChannel(channelList).then(room => {\n      redrawRoom();\n    }).catch(error => {\n      console.log(error);\n      alerts.showAlert(ErrorAlert({\n        message: Locales.Errors.FailedCreateRoom,\n        alertManager: alerts\n      }));\n    });\n  },\n  refresh: function (channelId) {\n    const channelList = refreshChannel(room.channels, channelId);\n    editChannel().then(room => {\n      redrawRoom();\n    }).catch(error => {\n      console.log(error);\n      alerts.showAlert(ErrorAlert({\n        message: Locales.Errors.FailedCreateRoom,\n        alertManager: alerts\n      }));\n    });\n  }\n});","map":{"version":3,"names":["editChannel","createChannel","renameChannel","deleteChannel","refreshChannel","channelOperation","room","redrawRoom","alerts","create","channelName","channelList","channels","then","catch","error","console","log","showAlert","ErrorAlert","message","Locales","Errors","FailedCreateRoom","alertManager","rename","newNameChannel","renameChannelId","delete","delChannenlId","refresh","channelId"],"sources":["/Users/mirustal/Documents/project/rooms/front/rooms/src/components/views/Channels/utils/channelOperation.jsx"],"sourcesContent":["import { editChannel } from '../../../../serverApi/serverApi';\nimport { createChannel, renameChannel, deleteChannel, refreshChannel } from './channelManager';\n\nexport const channelOperation = (room, redrawRoom, alerts) => ({\n    \n  create: function (channelName) {\n    const channelList = createChannel(room.channels, channelName)\n    editChannel(channelList)\n      .then((room) => {\n        redrawRoom()\n      })\n      .catch((error) => {\n        console.log(error)\n        alerts.showAlert(\n          ErrorAlert({\n            message: Locales.Errors.FailedCreateRoom,\n            alertManager: alerts,\n          })\n        );\n      });\n  },\n\n  rename: function (newNameChannel, renameChannelId) {\n    const channelList = renameChannel(room.channels, newNameChannel, renameChannelId)\n    editChannel(channelList)\n      .then((room) => {\n        redrawRoom()\n      })\n      .catch((error) => {\n        console.log(error)\n        alerts.showAlert(\n          ErrorAlert({\n            message: Locales.Errors.FailedCreateRoom,\n            alertManager: alerts,\n          })\n        );\n      });\n  },\n\n  delete: function (delChannenlId) {\n    const channelList = deleteChannel(room.channels, delChannenlId)\n    editChannel(channelList)\n      .then((room) => {\n        redrawRoom()\n      })\n      .catch((error) => {\n        console.log(error)\n        alerts.showAlert(\n          ErrorAlert({\n            message: Locales.Errors.FailedCreateRoom,\n            alertManager: alerts,\n          })\n        );\n      });\n  },\n\n  refresh: function (channelId) {\n    const channelList = refreshChannel(room.channels, channelId)\n    editChannel()\n      .then((room) => {\n        redrawRoom()\n      })\n      .catch((error) => {\n        console.log(error)\n        alerts.showAlert(\n          ErrorAlert({\n            message: Locales.Errors.FailedCreateRoom,\n            alertManager: alerts,\n          })\n        );\n      });\n  },\n});"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iCAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,cAAtD,QAA4E,kBAA5E;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,MAAnB,MAA+B;EAE7DC,MAAM,EAAE,UAAUC,WAAV,EAAuB;IAC7B,MAAMC,WAAW,GAAGV,aAAa,CAACK,IAAI,CAACM,QAAN,EAAgBF,WAAhB,CAAjC;IACAV,WAAW,CAACW,WAAD,CAAX,CACGE,IADH,CACSP,IAAD,IAAU;MACdC,UAAU;IACX,CAHH,EAIGO,KAJH,CAIUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAP,MAAM,CAACU,SAAP,CACEC,UAAU,CAAC;QACTC,OAAO,EAAEC,OAAO,CAACC,MAAR,CAAeC,gBADf;QAETC,YAAY,EAAEhB;MAFL,CAAD,CADZ;IAMD,CAZH;EAaD,CAjB4D;EAmB7DiB,MAAM,EAAE,UAAUC,cAAV,EAA0BC,eAA1B,EAA2C;IACjD,MAAMhB,WAAW,GAAGT,aAAa,CAACI,IAAI,CAACM,QAAN,EAAgBc,cAAhB,EAAgCC,eAAhC,CAAjC;IACA3B,WAAW,CAACW,WAAD,CAAX,CACGE,IADH,CACSP,IAAD,IAAU;MACdC,UAAU;IACX,CAHH,EAIGO,KAJH,CAIUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAP,MAAM,CAACU,SAAP,CACEC,UAAU,CAAC;QACTC,OAAO,EAAEC,OAAO,CAACC,MAAR,CAAeC,gBADf;QAETC,YAAY,EAAEhB;MAFL,CAAD,CADZ;IAMD,CAZH;EAaD,CAlC4D;EAoC7DoB,MAAM,EAAE,UAAUC,aAAV,EAAyB;IAC/B,MAAMlB,WAAW,GAAGR,aAAa,CAACG,IAAI,CAACM,QAAN,EAAgBiB,aAAhB,CAAjC;IACA7B,WAAW,CAACW,WAAD,CAAX,CACGE,IADH,CACSP,IAAD,IAAU;MACdC,UAAU;IACX,CAHH,EAIGO,KAJH,CAIUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAP,MAAM,CAACU,SAAP,CACEC,UAAU,CAAC;QACTC,OAAO,EAAEC,OAAO,CAACC,MAAR,CAAeC,gBADf;QAETC,YAAY,EAAEhB;MAFL,CAAD,CADZ;IAMD,CAZH;EAaD,CAnD4D;EAqD7DsB,OAAO,EAAE,UAAUC,SAAV,EAAqB;IAC5B,MAAMpB,WAAW,GAAGP,cAAc,CAACE,IAAI,CAACM,QAAN,EAAgBmB,SAAhB,CAAlC;IACA/B,WAAW,GACRa,IADH,CACSP,IAAD,IAAU;MACdC,UAAU;IACX,CAHH,EAIGO,KAJH,CAIUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAP,MAAM,CAACU,SAAP,CACEC,UAAU,CAAC;QACTC,OAAO,EAAEC,OAAO,CAACC,MAAR,CAAeC,gBADf;QAETC,YAAY,EAAEhB;MAFL,CAAD,CADZ;IAMD,CAZH;EAaD;AApE4D,CAA/B,CAAzB"},"metadata":{},"sourceType":"module"}