{"ast":null,"code":"export var numericUnicodeMap = {\n  0: 65533,\n  128: 8364,\n  130: 8218,\n  131: 402,\n  132: 8222,\n  133: 8230,\n  134: 8224,\n  135: 8225,\n  136: 710,\n  137: 8240,\n  138: 352,\n  139: 8249,\n  140: 338,\n  142: 381,\n  145: 8216,\n  146: 8217,\n  147: 8220,\n  148: 8221,\n  149: 8226,\n  150: 8211,\n  151: 8212,\n  152: 732,\n  153: 8482,\n  154: 353,\n  155: 8250,\n  156: 339,\n  158: 382,\n  159: 376\n};\nexport var highSurrogateFrom = 0xd800;\nexport var highSurrogateTo = 0xdbff;\nexport var fromCodePoint = /*#__PURE__*/function () {\n  return String.fromCodePoint || function (astralCodePoint) {\n    return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800, (astralCodePoint - 0x10000) % 0x400 + 0xdc00);\n  };\n}();\nvar codePointAtNative = /*#__PURE__*/function () {\n  return String.prototype.codePointAt;\n}();\nexport var getCodePointAt = /*#__PURE__*/function () {\n  return codePointAtNative ? function (input, position) {\n    return input.codePointAt(position);\n  } : function (input, position) {\n    return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n  };\n}();","map":{"version":3,"names":["numericUnicodeMap","highSurrogateFrom","highSurrogateTo","fromCodePoint","String","astralCodePoint","fromCharCode","Math","floor","codePointAtNative","prototype","codePointAt","getCodePointAt","input","position","charCodeAt"],"sources":["../../../src/lib/codepoints.ts"],"sourcesContent":["export const numericUnicodeMap: Record<number, number> = {\n  0: 65533,\n  128: 8364,\n  130: 8218,\n  131: 402,\n  132: 8222,\n  133: 8230,\n  134: 8224,\n  135: 8225,\n  136: 710,\n  137: 8240,\n  138: 352,\n  139: 8249,\n  140: 338,\n  142: 381,\n  145: 8216,\n  146: 8217,\n  147: 8220,\n  148: 8221,\n  149: 8226,\n  150: 8211,\n  151: 8212,\n  152: 732,\n  153: 8482,\n  154: 353,\n  155: 8250,\n  156: 339,\n  158: 382,\n  159: 376,\n};\n\nexport const highSurrogateFrom = 0xd800;\nexport const highSurrogateTo = 0xdbff;\n\nexport const fromCodePoint = /*#__PURE__*/ (() =>\n  String.fromCodePoint ||\n  function (astralCodePoint: number) {\n    return String.fromCharCode(\n      Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800,\n      ((astralCodePoint - 0x10000) % 0x400) + 0xdc00,\n    );\n  })();\n\nconst codePointAtNative = /*#__PURE__*/ (() =>\n  String.prototype.codePointAt as typeof String.prototype.codePointAt | undefined)();\n\nexport const getCodePointAt = /*#__PURE__*/ (() =>\n  codePointAtNative\n    ? function (input: string, position: number) {\n        return input.codePointAt(position);\n      }\n    : function (input: string, position: number) {\n        return (\n          (input.charCodeAt(position) - 0xd800) * 0x400 +\n          input.charCodeAt(position + 1) -\n          0xdc00 +\n          0x10000\n        );\n      })();\n"],"mappings":"AAAA,OAAO,IAAMA,iBAAA,GAA4C;EACvD,GAAG;EACH,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;AACP;AAEA,OAAO,IAAMC,iBAAA,GAAoB;AACjC,OAAO,IAAMC,eAAA,GAAkB;AAE/B,OAAO,IAAMC,aAAA,GAA8B,aAAC;SAC1CC,MAAA,CAAOD,aAAa,IACpB,UAAUE,eAAuB;IAC/B,OAAOD,MAAA,CAAOE,YAAY,CACxBC,IAAA,CAAKC,KAAK,CAAC,CAACH,eAAA,GAAkB,OAAM,IAAK,SAAS,QAClD,CAAEA,eAAA,GAAkB,OAAM,IAAK,QAAS;EAE5C;;AAEF,IAAMI,iBAAA,GAAkC,aAAC;SACvCL,MAAA,CAAOM,SAAS,CAACC,WAAW;;AAE9B,OAAO,IAAMC,cAAA,GAA+B,aAAC;SAC3CH,iBAAA,GACI,UAAUI,KAAa,EAAEC,QAAgB;IACvC,OAAOD,KAAA,CAAMF,WAAW,CAACG,QAAA;EAC3B,IACA,UAAUD,KAAa,EAAEC,QAAgB;IACvC,OACE,CAACD,KAAA,CAAME,UAAU,CAACD,QAAA,IAAY,MAAK,IAAK,QACxCD,KAAA,CAAME,UAAU,CAACD,QAAA,GAAW,KAC5B,SACA;EAEJ"},"metadata":{},"sourceType":"module"}