{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nimport dayjs from \"dayjs\";\nexport function startOfDay(date) {\n  return dayjs(date).startOf(\"day\").toDate();\n}\nexport function endOfDay(date) {\n  return dayjs(date).endOf(\"day\").toDate();\n}\nexport function startOfWeek(date) {\n  var weekStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  weekStart = weekStart % 7;\n  var day = dayjs(date);\n  var weekDay = day.day();\n  var diff = (weekDay < weekStart ? 7 : 0) + weekDay - weekStart;\n  return day.date(day.date() - diff).toDate();\n}\nexport function endOfWeek(date) {\n  var weekStart = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  var day = dayjs(startOfWeek(date, weekStart));\n  return day.date(day.date() + 6).toDate();\n}\nexport function startOfMonth(date) {\n  return dayjs(date).startOf(\"month\").toDate();\n}\nexport function endOfMonth(date) {\n  return dayjs(date).endOf(\"month\").toDate();\n}\nexport function isFirstDayOfMonth(date) {\n  return dayjs(date).date() === 1;\n}\nexport function isLastDayOfMonth(date) {\n  // isSameDay -- shorter, but not exact with date-fns behavior\n  // return isSameDay(date, dayjs(date).endOf(\"month\"));\n  return dayjs(date).endOf(\"day\").isSame(dayjs(date).endOf(\"month\"));\n}\nexport function format(date, format) {\n  return dayjs(date).format(format);\n}\nexport function isBefore(date1, date2) {\n  // Exactly as date-fns does\n  // dayjs().isBefore() for slightly different approach\n  return dayjs(date1) < dayjs(date2);\n}\nexport function isAfter(date1, date2) {\n  return dayjs(date1) > dayjs(date2);\n}\nexport function isSameDay(date1, date2) {\n  return dayjs(date1).isSame(date2, \"day\");\n}\nexport function isSameMonth(date1, date2) {\n  return dayjs(date1).isSame(date2, \"month\");\n}\nexport function isWithinInterval(date, start, end) {\n  var day = dayjs(date);\n  return day >= dayjs(start) && day <= dayjs(end);\n}\nexport function setMinutes(date, minute) {\n  return dayjs(date).set(\"minute\", minute).toDate();\n}\nexport function setHours(date, hour) {\n  return dayjs(date).set(\"hour\", hour).toDate();\n}\nexport function setMonth(date, month) {\n  return dayjs(date).set(\"month\", month).toDate();\n}\nexport function setYear(date, year) {\n  return dayjs(date).set(\"year\", year).toDate();\n}\nexport function addDays(date, day) {\n  return dayjs(date).add(day, \"day\").toDate();\n}\nexport function subDays(date, day) {\n  return dayjs(date).subtract(day, \"day\").toDate();\n}\nexport function addWeeks(date, week) {\n  return dayjs(date).add(week, \"week\").toDate();\n}\nexport function subWeeks(date, week) {\n  return dayjs(date).subtract(week, \"week\").toDate();\n}\nexport function addMonths(date, month) {\n  return dayjs(date).add(month, \"month\").toDate();\n}\nexport function subMonths(date, month) {\n  return dayjs(date).subtract(month, \"month\").toDate();\n}\n// Rip off date-fns\nexport function eachDayOfInterval(start, end) {\n  var dates = [];\n  var startDate = dayjs(start).toDate();\n  var endDate = dayjs(end).toDate();\n  var endTime = endDate.getTime();\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  while (currentDate.getTime() <= endTime) {\n    dates.push(new Date(currentDate.getTime()));\n    currentDate.setDate(currentDate.getDate() + 1);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return dates;\n}\nexport function parse(input, format) {\n  var _loop = function () {\n    var match = superRegExp.exec(format);\n    if (!match) {\n      return \"break\";\n    }\n    var length = match[0].length;\n    var atIndex = superRegExp.lastIndex - length;\n    var item = entries.find(function (item) {\n      return item[0] === match[0];\n    });\n    lastNonFormatting = format.slice(lastFormatIndex, atIndex);\n    lastFormatIndex = superRegExp.lastIndex;\n    if (input.slice(prevInputIndex, prevInputIndex + lastNonFormatting.length) !== lastNonFormatting) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n    var value = input.slice(prevInputIndex + lastNonFormatting.length).match(item[1]);\n    if (!value) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n    prevInputIndex = prevInputIndex + lastNonFormatting.length + value[0].length;\n    var _item_ = _sliced_to_array(item[2](value[0]), 3),\n      key = _item_[0],\n      newValue = _item_[1],\n      okay = _item_[2];\n    if (!okay) {\n      return {\n        v: new Date(\"\")\n      };\n    }\n    store[key] = newValue;\n    found = true;\n  };\n  var referenceDate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n  var match2 = /^\\d\\d/; // 00 - 99\n  var match4 = /^\\d{4}/; // 0000 - 9999\n  var entries = [[\"YYYY\", match4, function (val) {\n    return [\"Y\", +val, true];\n  }], [\"MM\", match2, function (val) {\n    var numVal = +val;\n    var okay = numVal > 0 && numVal <= 12;\n    return [\"M\", numVal - 1, okay];\n  }], [\"DD\", match2, function (val) {\n    return [\"D\", +val, true];\n  }], [\"HH\", match2, function (val) {\n    var numVal = parseInt(val, 10);\n    var okay = numVal >= 0 && numVal < 24;\n    return [\"h\", numVal, okay];\n  }], [\"mm\", match2, function (val) {\n    var numVal = parseInt(val, 10);\n    var okay = numVal >= 0 && numVal < 60;\n    return [\"m\", numVal, okay];\n  }]];\n  var superRegExp = new RegExp(entries.map(function (item) {\n    return item[0];\n  }).join(\"|\"), \"g\");\n  var store = {\n    Y: referenceDate.getFullYear(),\n    M: referenceDate.getMonth(),\n    D: referenceDate.getDate(),\n    h: referenceDate.getHours(),\n    m: referenceDate.getMinutes(),\n    s: referenceDate.getSeconds(),\n    ms: referenceDate.getMilliseconds()\n  };\n  var prevInputIndex = 0;\n  var lastNonFormatting = \"\";\n  var lastFormatIndex = 0;\n  var found = false;\n  while (true) {\n    var _ret = _loop();\n    if (_type_of(_ret) === \"object\") return _ret.v;\n    if (_ret === \"break\") break;\n  }\n  if (!found) {\n    return new Date(\"\");\n  }\n  var date = new Date(store.Y, store.M, store.D, store.h, store.m, store.s, store.ms);\n  // Since days of months are dynamic, they can't be validated in entries,\n  // so we check it here, in the finalized date\n  if (date.getMonth() !== store.M || date.getDate() !== store.D) {\n    return new Date(\"\");\n  }\n  return date;\n}\nexport function isMatch(input, format) {\n  return !isNaN(+parse(input, format));\n}\nexport function getMillisecondsToTomorrow(date) {\n  return dayjs(endOfDay(date)).diff(dayjs(date), \"ms\");\n}","map":{"version":3,"names":["dayjs","startOfDay","date","startOf","toDate","endOfDay","endOf","startOfWeek","weekStart","arguments","length","day","weekDay","diff","endOfWeek","startOfMonth","endOfMonth","isFirstDayOfMonth","isLastDayOfMonth","isSame","format","isBefore","date1","date2","isAfter","isSameDay","isSameMonth","isWithinInterval","start","end","setMinutes","minute","set","setHours","hour","setMonth","month","setYear","year","addDays","add","subDays","subtract","addWeeks","week","subWeeks","addMonths","subMonths","eachDayOfInterval","dates","startDate","endDate","endTime","getTime","currentDate","push","Date","setDate","getDate","parse","input","match","superRegExp","exec","atIndex","lastIndex","item","entries","find","lastNonFormatting","slice","lastFormatIndex","prevInputIndex","value","_item_","_sliced_to_array","key","newValue","okay","store","found","referenceDate","match2","match4","val","numVal","parseInt","RegExp","map","join","Y","getFullYear","M","getMonth","D","h","getHours","m","getMinutes","s","getSeconds","ms","getMilliseconds","isMatch","isNaN","getMillisecondsToTomorrow"],"sources":["../../src/lib/date.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\n// Using date-fns-like type for migration\ntype DirtyDate = Date | number;\n\nexport function startOfDay(date: DirtyDate) {\n  return dayjs(date).startOf('day').toDate();\n}\n\nexport function endOfDay(date: DirtyDate) {\n  return dayjs(date).endOf('day').toDate();\n}\n\nexport function startOfWeek(date: DirtyDate, weekStart = 0) {\n  weekStart = weekStart % 7;\n\n  const day = dayjs(date);\n  const weekDay = day.day();\n  const diff = (weekDay < weekStart ? 7 : 0) + weekDay - weekStart;\n\n  return day.date(day.date() - diff).toDate();\n}\n\nexport function endOfWeek(date: DirtyDate, weekStart = 0) {\n  const day = dayjs(startOfWeek(date, weekStart));\n\n  return day.date(day.date() + 6).toDate();\n}\n\nexport function startOfMonth(date: DirtyDate) {\n  return dayjs(date).startOf('month').toDate();\n}\n\nexport function endOfMonth(date: DirtyDate) {\n  return dayjs(date).endOf('month').toDate();\n}\n\nexport function isFirstDayOfMonth(date: DirtyDate) {\n  return dayjs(date).date() === 1;\n}\n\nexport function isLastDayOfMonth(date: DirtyDate) {\n  // isSameDay -- shorter, but not exact with date-fns behavior\n  // return isSameDay(date, dayjs(date).endOf(\"month\"));\n  return dayjs(date).endOf('day').isSame(dayjs(date).endOf('month'));\n}\n\nexport function format(date: DirtyDate, format: string) {\n  return dayjs(date).format(format);\n}\n\nexport function isBefore(date1: DirtyDate, date2: DirtyDate) {\n  // Exactly as date-fns does\n  // dayjs().isBefore() for slightly different approach\n  return dayjs(date1) < dayjs(date2);\n}\n\nexport function isAfter(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1) > dayjs(date2);\n}\n\nexport function isSameDay(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1).isSame(date2, 'day');\n}\n\nexport function isSameMonth(date1: DirtyDate, date2: DirtyDate) {\n  return dayjs(date1).isSame(date2, 'month');\n}\n\nexport function isWithinInterval(date: DirtyDate, start: DirtyDate, end: DirtyDate) {\n  const day = dayjs(date);\n  return day >= dayjs(start) && day <= dayjs(end);\n}\n\nexport function setMinutes(date: DirtyDate, minute: number) {\n  return dayjs(date).set('minute', minute).toDate();\n}\n\nexport function setHours(date: DirtyDate, hour: number) {\n  return dayjs(date).set('hour', hour).toDate();\n}\n\nexport function setMonth(date: DirtyDate, month: number) {\n  return dayjs(date).set('month', month).toDate();\n}\n\nexport function setYear(date: DirtyDate, year: number) {\n  return dayjs(date).set('year', year).toDate();\n}\n\nexport function addDays(date: DirtyDate, day: number) {\n  return dayjs(date).add(day, 'day').toDate();\n}\n\nexport function subDays(date: DirtyDate, day: number) {\n  return dayjs(date).subtract(day, 'day').toDate();\n}\n\nexport function addWeeks(date: DirtyDate, week: number) {\n  return dayjs(date).add(week, 'week').toDate();\n}\n\nexport function subWeeks(date: DirtyDate, week: number) {\n  return dayjs(date).subtract(week, 'week').toDate();\n}\n\nexport function addMonths(date: DirtyDate, month: number) {\n  return dayjs(date).add(month, 'month').toDate();\n}\n\nexport function subMonths(date: DirtyDate, month: number) {\n  return dayjs(date).subtract(month, 'month').toDate();\n}\n\n// Rip off date-fns\nexport function eachDayOfInterval(start: DirtyDate, end: DirtyDate) {\n  const dates: Date[] = [];\n  const startDate = dayjs(start).toDate();\n  const endDate = dayjs(end).toDate();\n\n  const endTime = endDate.getTime();\n  const currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(new Date(currentDate.getTime()));\n    currentDate.setDate(currentDate.getDate() + 1);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}\n\nexport function parse(input: string, format: string, referenceDate: Date = new Date()) {\n  const match2 = /^\\d\\d/; // 00 - 99\n  const match4 = /^\\d{4}/; // 0000 - 9999\n\n  const entries: Array<[string, RegExp, (val: string) => [string, number, boolean]]> = [\n    ['YYYY', match4, (val) => ['Y', +val, true]],\n    [\n      'MM',\n      match2,\n      (val) => {\n        const numVal = +val;\n        const okay = numVal > 0 && numVal <= 12;\n\n        return ['M', numVal - 1, okay];\n      },\n    ],\n    ['DD', match2, (val) => ['D', +val, true]],\n    [\n      'HH',\n      match2,\n      (val) => {\n        const numVal = parseInt(val, 10);\n        const okay = numVal >= 0 && numVal < 24;\n\n        return ['h', numVal, okay];\n      },\n    ],\n    [\n      'mm',\n      match2,\n      (val) => {\n        const numVal = parseInt(val, 10);\n        const okay = numVal >= 0 && numVal < 60;\n\n        return ['m', numVal, okay];\n      },\n    ],\n  ];\n\n  const superRegExp = new RegExp(entries.map((item) => item[0]).join('|'), 'g');\n\n  const store: {\n    [key: string]: number;\n  } = {\n    Y: referenceDate.getFullYear(),\n    M: referenceDate.getMonth(),\n    D: referenceDate.getDate(),\n    h: referenceDate.getHours(),\n    m: referenceDate.getMinutes(),\n    s: referenceDate.getSeconds(),\n    ms: referenceDate.getMilliseconds(),\n  };\n\n  let prevInputIndex = 0;\n  let lastNonFormatting = '';\n  let lastFormatIndex = 0;\n  let found = false;\n\n  while (true) {\n    const match = superRegExp.exec(format);\n\n    if (!match) {\n      break;\n    }\n\n    const length = match[0].length;\n    const atIndex = superRegExp.lastIndex - length;\n\n    const item = entries.find((item) => item[0] === match[0])!;\n\n    lastNonFormatting = format.slice(lastFormatIndex, atIndex);\n    lastFormatIndex = superRegExp.lastIndex;\n\n    if (\n      input.slice(prevInputIndex, prevInputIndex + lastNonFormatting.length) !== lastNonFormatting\n    ) {\n      return new Date('');\n    }\n\n    const value = input.slice(prevInputIndex + lastNonFormatting.length).match(item[1]);\n\n    if (!value) {\n      return new Date('');\n    }\n\n    prevInputIndex = prevInputIndex + lastNonFormatting.length + value[0].length;\n\n    const [key, newValue, okay] = item[2](value[0]);\n\n    if (!okay) {\n      return new Date('');\n    }\n\n    store[key] = newValue;\n    found = true;\n  }\n\n  if (!found) {\n    return new Date('');\n  }\n\n  const date = new Date(store.Y, store.M, store.D, store.h, store.m, store.s, store.ms);\n\n  // Since days of months are dynamic, they can't be validated in entries,\n  // so we check it here, in the finalized date\n  if (date.getMonth() !== store.M || date.getDate() !== store.D) {\n    return new Date('');\n  }\n\n  return date;\n}\n\nexport function isMatch(input: string, format: string) {\n  return !isNaN(+parse(input, format));\n}\n\nexport function getMillisecondsToTomorrow(date: DirtyDate) {\n  return dayjs(endOfDay(date)).diff(dayjs(date), 'ms');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}