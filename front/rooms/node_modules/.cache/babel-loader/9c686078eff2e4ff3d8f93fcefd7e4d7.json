{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { clamp } from \"../../helpers/math\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Touch } from \"../Touch/Touch\";\nimport { SliderThumb } from \"./SliderThumb/SliderThumb\";\nimport { extractSliderAriaAttributesFromRestProps, getDraggingTypeByTargetDataset, isMultipleValues, offsetToValue, snapDirection, toPercent, updateInternalStateValue, updateInternalStateValueByNativeChange } from \"./helpers\";\nvar sizeYClassNames = _define_property({\n  none: \"vkuiSlider--sizeY-none\"\n}, SizeType.COMPACT, \"vkuiSlider--sizeY-compact\");\n/**\n * @see https://vkcom.github.io/VKUI/#/Slider\n */\nexport var Slider = function (_param) {\n  var\n    // TODO [>=6]: Выставить 1 как значение по умолчанию, чтобы было как в браузерном <input type=\"range\" />\n    step = _param.step,\n    _param_min = _param.min,\n    min = _param_min === void 0 ? 0 : _param_min,\n    _param_max = _param.max,\n    max = _param_max === void 0 ? 100 : _param_max,\n    valueProp = _param.value,\n    multipleProp = _param.multiple,\n    _param_defaultValue = _param.defaultValue,\n    defaultValue = _param_defaultValue === void 0 ? multipleProp ? [min, max] : min : _param_defaultValue,\n    disabled = _param.disabled,\n    className = _param.className,\n    getRootRef = _param.getRootRef,\n    getAriaLabel = _param.getAriaLabel,\n    getAriaValueText = _param.getAriaValueText,\n    onChange = _param.onChange,\n    withTooltip = _param.withTooltip,\n    restProps = _object_without_properties(_param, [\"step\", \"min\", \"max\", \"value\", \"multiple\", \"defaultValue\", \"disabled\", \"className\", \"getRootRef\", \"getAriaLabel\", \"getAriaValueText\", \"onChange\", \"withTooltip\"]);\n  var _useAdaptivity = useAdaptivity(),\n    _useAdaptivity_sizeY = _useAdaptivity.sizeY,\n    sizeY = _useAdaptivity_sizeY === void 0 ? \"none\" : _useAdaptivity_sizeY;\n  var isControlled = valueProp !== undefined;\n  var _React_useState = _sliced_to_array(React.useState(defaultValue), 2),\n    localValue = _React_useState[0],\n    setValue = _React_useState[1];\n  var value = React.useMemo(function () {\n    var resolvedValue = isControlled ? valueProp : localValue;\n    return Array.isArray(resolvedValue) ? [clamp(resolvedValue[0], min, max), clamp(resolvedValue[1], min, max)] : [clamp(resolvedValue, min, max), null];\n  }, [isControlled, valueProp, localValue, min, max]);\n  var _value = _sliced_to_array(value, 2),\n    startValue = _value[0],\n    endValue = _value[1];\n  var multiple = multipleProp && endValue !== null;\n  var startValueInPercent = toPercent(startValue, min, max);\n  var endReversedValueInPercent = multiple ? toPercent(endValue, min, max) : 0;\n  var gesture = React.useRef({\n    dragging: null,\n    startX: 0,\n    containerWidth: 0\n  }).current;\n  var thumbsContainerRef = useExternRef(getRootRef);\n  var thumbStartInputRef = React.useRef(null);\n  var thumbEndInputRef = React.useRef(null);\n  var _extractSliderAriaAttributesFromRestProps = extractSliderAriaAttributesFromRestProps(restProps),\n    ariaLabel = _extractSliderAriaAttributesFromRestProps.ariaLabel,\n    ariaValueText = _extractSliderAriaAttributesFromRestProps.ariaValueText,\n    ariaLabelledBy = _extractSliderAriaAttributesFromRestProps.ariaLabelledBy,\n    restPropsWithoutAriaAttributes = _object_without_properties(_extractSliderAriaAttributesFromRestProps, [\"ariaLabel\", \"ariaValueText\", \"ariaLabelledBy\"]);\n  var changeValue = function (nextValue, event) {\n    if (disabled || value[0] === nextValue[0] && value[1] === nextValue[1]) {\n      return;\n    }\n    if (multipleProp) {\n      if (isMultipleValues(nextValue)) {\n        !isControlled && setValue(nextValue);\n        onChange && onChange(nextValue, event);\n      }\n    } else {\n      !isControlled && setValue(nextValue[0]);\n      onChange && onChange(nextValue[0], event);\n    }\n  };\n  var handlePointerStart = function (event) {\n    if (!thumbsContainerRef.current) {\n      return;\n    }\n    var _thumbsContainerRef_current_getBoundingClientRect = thumbsContainerRef.current.getBoundingClientRect(),\n      nextContainerX = _thumbsContainerRef_current_getBoundingClientRect.left,\n      nextContainerWidth = _thumbsContainerRef_current_getBoundingClientRect.width;\n    // @ts-expect-error: TS2345 в VKUITouchEvent плохо описаны типы. `target` это просто `EventTarget`.\n    var foundDraggingType = getDraggingTypeByTargetDataset(event.originalEvent.target);\n    var nextStartX = event.startX - nextContainerX;\n    var nextValue = offsetToValue(nextStartX, nextContainerWidth, min, max, step);\n    var nextDragging = snapDirection(value, nextValue, foundDraggingType);\n    gesture.dragging = nextDragging;\n    gesture.containerWidth = nextContainerWidth;\n    gesture.startX = nextStartX;\n    var updatedInternalStateValue = updateInternalStateValue(value, nextValue, min, max, nextDragging);\n    var _updatedInternalStateValue = _sliced_to_array(updatedInternalStateValue, 2),\n      nextStartValue = _updatedInternalStateValue[0],\n      nextEndValue = _updatedInternalStateValue[1];\n    if (thumbStartInputRef.current && (foundDraggingType === \"start\" || nextStartValue !== startValue && nextEndValue === endValue)) {\n      thumbStartInputRef.current.focus();\n      event.originalEvent.preventDefault();\n    } else if (thumbEndInputRef.current && (foundDraggingType === \"end\" || nextEndValue !== endValue && nextStartValue === startValue)) {\n      thumbEndInputRef.current.focus();\n      event.originalEvent.preventDefault();\n    }\n    changeValue(updatedInternalStateValue, event);\n    event.originalEvent.stopPropagation();\n  };\n  var handlePointerMove = function (event) {\n    var startX = gesture.startX,\n      containerWidth = gesture.containerWidth,\n      dragging = gesture.dragging;\n    var _event_shiftX = event.shiftX,\n      shiftX = _event_shiftX === void 0 ? 0 : _event_shiftX;\n    var nextStartX = startX + shiftX;\n    var nextValue = offsetToValue(nextStartX, containerWidth, min, max, step);\n    changeValue(updateInternalStateValue(value, nextValue, min, max, dragging), event);\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n  };\n  var handlePointerEnd = function (event) {\n    gesture.dragging = null;\n    event.originalEvent.stopPropagation();\n  };\n  var handleChangeByNativeInput = function (event) {\n    changeValue(updateInternalStateValueByNativeChange(value, Number(event.target.value), getDraggingTypeByTargetDataset(event.target)),\n    // @ts-expect-error: TS2345 сейчас тип расширить не получится (см. TODO в описании `onChange`)\n    event);\n  };\n  return /*#__PURE__*/React.createElement(Touch, _object_spread_props(_object_spread({\n    \"data-value\": multiple ? \"\".concat(startValue, \",\").concat(endValue) : startValue\n  }, restPropsWithoutAriaAttributes), {\n    className: classNames(\"vkuiSlider\", disabled && \"vkuiSlider--disabled\", sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY], className),\n    onStart: disabled ? undefined : handlePointerStart,\n    onMove: disabled ? undefined : handlePointerMove,\n    onEnd: disabled ? undefined : handlePointerEnd\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSlider__track\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSlider__track-fill\",\n    style: multiple ? {\n      left: \"\".concat(startValueInPercent, \"%\"),\n      right: \"\".concat(100 - endReversedValueInPercent, \"%\")\n    } : {\n      width: \"\".concat(startValueInPercent, \"%\")\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: thumbsContainerRef,\n    className: \"vkuiSlider__thumbs\"\n  }, /*#__PURE__*/React.createElement(SliderThumb, {\n    \"data-type\": \"start\",\n    className: \"vkuiSlider__thumb\",\n    style: {\n      left: \"\".concat(startValueInPercent, \"%\"),\n      // Меняем местами порядок слоёв, иначе, при достижении `start` и `end` 100%, `end` будет перекрывать `start`.\n      zIndex: multiple && startValueInPercent >= 50 ? 2 : undefined\n    },\n    withTooltip: withTooltip,\n    inputProps: {\n      \"data-type\": \"start\",\n      \"ref\": thumbStartInputRef,\n      \"step\": step,\n      \"min\": min,\n      \"value\": startValue,\n      \"max\": multiple ? endValue : max,\n      \"disabled\": disabled,\n      \"aria-label\": getAriaLabel ? getAriaLabel(0) : ariaLabel,\n      \"aria-valuetext\": getAriaValueText ? getAriaValueText(startValue, 0) : ariaValueText,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"onChange\": handleChangeByNativeInput\n    }\n  }), multiple && /*#__PURE__*/React.createElement(SliderThumb, {\n    \"data-type\": \"end\",\n    className: \"vkuiSlider__thumb\",\n    style: {\n      left: \"\".concat(endReversedValueInPercent, \"%\")\n    },\n    withTooltip: withTooltip,\n    inputProps: {\n      \"data-type\": \"end\",\n      \"ref\": thumbEndInputRef,\n      \"step\": step,\n      \"min\": startValue,\n      \"value\": endValue,\n      \"max\": max,\n      \"disabled\": disabled,\n      \"aria-label\": getAriaLabel ? getAriaLabel(1) : ariaLabel,\n      \"aria-valuetext\": getAriaValueText ? getAriaValueText(endValue, 1) : ariaValueText,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"onChange\": handleChangeByNativeInput\n    }\n  })));\n};","map":{"version":3,"names":["React","classNames","clamp","useAdaptivity","useExternRef","SizeType","Touch","SliderThumb","extractSliderAriaAttributesFromRestProps","getDraggingTypeByTargetDataset","isMultipleValues","offsetToValue","snapDirection","toPercent","updateInternalStateValue","updateInternalStateValueByNativeChange","sizeYClassNames","_define_property","none","COMPACT","Slider","_param","step","_param_min","min","_param_max","max","valueProp","value","multipleProp","multiple","_param_defaultValue","defaultValue","disabled","className","getRootRef","getAriaLabel","getAriaValueText","onChange","withTooltip","restProps","_object_without_properties","_useAdaptivity","_useAdaptivity_sizeY","sizeY","isControlled","undefined","_React_useState","_sliced_to_array","useState","localValue","setValue","useMemo","resolvedValue","Array","isArray","_value","startValue","endValue","startValueInPercent","endReversedValueInPercent","gesture","useRef","dragging","startX","containerWidth","current","thumbsContainerRef","thumbStartInputRef","thumbEndInputRef","_extractSliderAriaAttributesFromRestProps","ariaLabel","ariaValueText","ariaLabelledBy","restPropsWithoutAriaAttributes","changeValue","nextValue","event","handlePointerStart","_thumbsContainerRef_current_getBoundingClientRect","getBoundingClientRect","nextContainerX","left","nextContainerWidth","width","foundDraggingType","originalEvent","target","nextStartX","nextDragging","updatedInternalStateValue","_updatedInternalStateValue","nextStartValue","nextEndValue","focus","preventDefault","stopPropagation","handlePointerMove","_event_shiftX","shiftX","handlePointerEnd","handleChangeByNativeInput","Number","createElement","_object_spread_props","_object_spread","concat","REGULAR","onStart","onMove","onEnd","style","right","ref","zIndex","inputProps"],"sources":["../../../src/components/Slider/Slider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { clamp } from '../../helpers/math';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { SizeType } from '../../lib/adaptivity';\nimport { HTMLAttributesWithRootRef } from '../../types';\nimport { Touch, type TouchEvent, type TouchEventHandler } from '../Touch/Touch';\nimport { SliderThumb } from './SliderThumb/SliderThumb';\nimport {\n  extractSliderAriaAttributesFromRestProps,\n  getDraggingTypeByTargetDataset,\n  isMultipleValues,\n  offsetToValue,\n  snapDirection,\n  toPercent,\n  updateInternalStateValue,\n  updateInternalStateValueByNativeChange,\n} from './helpers';\nimport type { InternalGestureRef, InternalValueState } from './types';\nimport styles from './Slider.module.css';\n\nconst sizeYClassNames = {\n  none: styles['Slider--sizeY-none'],\n  [SizeType.COMPACT]: styles['Slider--sizeY-compact'],\n};\n\nexport interface SliderBaseProps\n  extends Omit<HTMLAttributesWithRootRef<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'> {\n  min?: number;\n  max?: number;\n  step?: number;\n  disabled?: boolean;\n  /**\n   * Тоже самое, что и `aria-label`, но на вход можно получать индекс текущего ползунка и в зависимости от этого выдавать разный текст.\n   *\n   * > Перебивает `aria-label`.\n   */\n  getAriaLabel?(index: number): string;\n  /**\n   * В отличие от `aria-valuetext`, позволяет более гибко форматировать текст в зависимости от значения ползунка.\n   *\n   * Полезно при использовании компонента как неконтролируемого.\n   *\n   * > Перебивает `aria-valuetext`.\n   */\n  getAriaValueText?(value: number, index: number): string;\n  withTooltip?: boolean;\n}\n\nexport interface SliderProps extends SliderBaseProps {\n  multiple?: false;\n  value?: number;\n  defaultValue?: number;\n  /**\n   * TODO [>=6]: Расширить тип `event` с `React.ChangeEvent`.\n   */\n  onChange?(value: number, event: TouchEvent): void;\n}\n\nexport interface SliderMultipleProps extends SliderBaseProps {\n  multiple: true;\n  value?: [number, number];\n  defaultValue?: [number, number];\n  /**\n   * TODO [>=6]: Расширить тип `event` с `React.ChangeEvent`.\n   */\n  onChange?(value: [number, number], event: TouchEvent): void;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Slider\n */\nexport const Slider = ({\n  // TODO [>=6]: Выставить 1 как значение по умолчанию, чтобы было как в браузерном <input type=\"range\" />\n  step,\n  min = 0,\n  max = 100,\n  value: valueProp,\n  multiple: multipleProp,\n  defaultValue = multipleProp ? [min, max] : min,\n  disabled,\n  className,\n  getRootRef,\n  getAriaLabel,\n  getAriaValueText,\n  onChange,\n  withTooltip,\n  ...restProps\n}: SliderProps | SliderMultipleProps) => {\n  const { sizeY = 'none' } = useAdaptivity();\n\n  const isControlled = valueProp !== undefined;\n  const [localValue, setValue] = React.useState(defaultValue);\n\n  const value = React.useMemo<InternalValueState>(() => {\n    const resolvedValue = isControlled ? valueProp : localValue;\n    return Array.isArray(resolvedValue)\n      ? [clamp(resolvedValue[0], min, max), clamp(resolvedValue[1], min, max)]\n      : [clamp(resolvedValue, min, max), null];\n  }, [isControlled, valueProp, localValue, min, max]);\n\n  const [startValue, endValue] = value;\n  const multiple = multipleProp && endValue !== null;\n  const startValueInPercent = toPercent(startValue, min, max);\n  const endReversedValueInPercent = multiple ? toPercent(endValue, min, max) : 0;\n\n  const gesture = React.useRef<InternalGestureRef>({\n    dragging: null,\n    startX: 0,\n    containerWidth: 0,\n  }).current;\n  const thumbsContainerRef = useExternRef(getRootRef);\n  const thumbStartInputRef = React.useRef<HTMLInputElement>(null);\n  const thumbEndInputRef = React.useRef<HTMLInputElement>(null);\n\n  const { ariaLabel, ariaValueText, ariaLabelledBy, ...restPropsWithoutAriaAttributes } =\n    extractSliderAriaAttributesFromRestProps(restProps);\n\n  const changeValue = (nextValue: InternalValueState, event: TouchEvent) => {\n    if (disabled || (value[0] === nextValue[0] && value[1] === nextValue[1])) {\n      return;\n    }\n\n    if (multipleProp) {\n      if (isMultipleValues(nextValue)) {\n        !isControlled && setValue(nextValue);\n        onChange && onChange(nextValue, event);\n      }\n    } else {\n      !isControlled && setValue(nextValue[0]);\n      onChange && onChange(nextValue[0], event);\n    }\n  };\n\n  const handlePointerStart: TouchEventHandler = (event: TouchEvent) => {\n    if (!thumbsContainerRef.current) {\n      return;\n    }\n\n    const { left: nextContainerX, width: nextContainerWidth } =\n      thumbsContainerRef.current.getBoundingClientRect();\n\n    // @ts-expect-error: TS2345 в VKUITouchEvent плохо описаны типы. `target` это просто `EventTarget`.\n    const foundDraggingType = getDraggingTypeByTargetDataset(event.originalEvent.target);\n\n    const nextStartX = event.startX - nextContainerX;\n    const nextValue = offsetToValue(nextStartX, nextContainerWidth, min, max, step);\n    const nextDragging = snapDirection(value, nextValue, foundDraggingType);\n\n    gesture.dragging = nextDragging;\n    gesture.containerWidth = nextContainerWidth;\n    gesture.startX = nextStartX;\n\n    const updatedInternalStateValue = updateInternalStateValue(\n      value,\n      nextValue,\n      min,\n      max,\n      nextDragging,\n    );\n\n    const [nextStartValue, nextEndValue] = updatedInternalStateValue;\n    if (\n      thumbStartInputRef.current &&\n      (foundDraggingType === 'start' ||\n        (nextStartValue !== startValue && nextEndValue === endValue))\n    ) {\n      thumbStartInputRef.current.focus();\n      event.originalEvent.preventDefault();\n    } else if (\n      thumbEndInputRef.current &&\n      (foundDraggingType === 'end' || (nextEndValue !== endValue && nextStartValue === startValue))\n    ) {\n      thumbEndInputRef.current.focus();\n      event.originalEvent.preventDefault();\n    }\n\n    changeValue(updatedInternalStateValue, event);\n\n    event.originalEvent.stopPropagation();\n  };\n\n  const handlePointerMove: TouchEventHandler = (event: TouchEvent) => {\n    const { startX, containerWidth, dragging } = gesture;\n\n    const { shiftX = 0 } = event;\n    const nextStartX = startX + shiftX;\n    const nextValue = offsetToValue(nextStartX, containerWidth, min, max, step);\n\n    changeValue(updateInternalStateValue(value, nextValue, min, max, dragging), event);\n\n    event.originalEvent.stopPropagation();\n    event.originalEvent.preventDefault();\n  };\n\n  const handlePointerEnd: TouchEventHandler = (event) => {\n    gesture.dragging = null;\n    event.originalEvent.stopPropagation();\n  };\n\n  const handleChangeByNativeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    changeValue(\n      updateInternalStateValueByNativeChange(\n        value,\n        Number(event.target.value),\n        getDraggingTypeByTargetDataset(event.target),\n      ),\n      // @ts-expect-error: TS2345 сейчас тип расширить не получится (см. TODO в описании `onChange`)\n      event,\n    );\n  };\n\n  return (\n    <Touch\n      data-value={multiple ? `${startValue},${endValue}` : startValue}\n      {...restPropsWithoutAriaAttributes}\n      className={classNames(\n        styles['Slider'],\n        disabled && styles['Slider--disabled'],\n        sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY],\n        className,\n      )}\n      onStart={disabled ? undefined : handlePointerStart}\n      onMove={disabled ? undefined : handlePointerMove}\n      onEnd={disabled ? undefined : handlePointerEnd}\n    >\n      <div className={styles['Slider__track']} />\n      <div\n        className={styles['Slider__track-fill']}\n        style={\n          multiple\n            ? { left: `${startValueInPercent}%`, right: `${100 - endReversedValueInPercent}%` }\n            : { width: `${startValueInPercent}%` }\n        }\n      />\n      <div ref={thumbsContainerRef} className={styles['Slider__thumbs']}>\n        <SliderThumb\n          data-type=\"start\"\n          className={styles['Slider__thumb']}\n          style={{\n            left: `${startValueInPercent}%`,\n            // Меняем местами порядок слоёв, иначе, при достижении `start` и `end` 100%, `end` будет перекрывать `start`.\n            zIndex: multiple && startValueInPercent >= 50 ? 2 : undefined,\n          }}\n          withTooltip={withTooltip}\n          inputProps={{\n            'data-type': 'start',\n            'ref': thumbStartInputRef,\n            'step': step,\n            'min': min,\n            'value': startValue,\n            'max': multiple ? endValue : max,\n            'disabled': disabled,\n            'aria-label': getAriaLabel ? getAriaLabel(0) : ariaLabel,\n            'aria-valuetext': getAriaValueText ? getAriaValueText(startValue, 0) : ariaValueText,\n            'aria-labelledby': ariaLabelledBy,\n            'onChange': handleChangeByNativeInput,\n          }}\n        />\n        {multiple && (\n          <SliderThumb\n            data-type=\"end\"\n            className={styles['Slider__thumb']}\n            style={{ left: `${endReversedValueInPercent}%` }}\n            withTooltip={withTooltip}\n            inputProps={{\n              'data-type': 'end',\n              'ref': thumbEndInputRef,\n              'step': step,\n              'min': startValue,\n              'value': endValue,\n              'max': max,\n              'disabled': disabled,\n              'aria-label': getAriaLabel ? getAriaLabel(1) : ariaLabel,\n              'aria-valuetext': getAriaValueText ? getAriaValueText(endValue, 1) : ariaValueText,\n              'aria-labelledby': ariaLabelledBy,\n              'onChange': handleChangeByNativeInput,\n            }}\n          />\n        )}\n      </div>\n    </Touch>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}