{"ast":null,"code":"import { _ as _class_call_check } from \"@swc/helpers/_/_class_call_check\";\nimport { _ as _create_class } from \"@swc/helpers/_/_create_class\";\nimport { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { BrowserSymbol } from \"./browser-symbol\";\nvar namespaceURI = \"http://www.w3.org/2000/svg\";\nexport var BrowserSprite = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BrowserSprite() {\n    var config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _class_call_check(this, BrowserSprite);\n    _define_property(this, \"symbols\", new Map());\n    _define_property(this, \"config\", {\n      attrs: {\n        \"xmlns\": namespaceURI,\n        \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n        \"style\": \"position:absolute;width:0;height:0\",\n        \"aria-hidden\": \"true\"\n      }\n    });\n    _define_property(this, \"node\", null);\n    Object.assign(this.config.attrs, config.attrs);\n  }\n  _create_class(BrowserSprite, [{\n    key: \"push\",\n    value: function push(symbol) {\n      var symbols = this.symbols;\n      var existing = symbols.has(symbol.id);\n      symbols.set(symbol.id, symbol);\n      return !existing;\n    }\n  }, {\n    key: \"add\",\n    value: function add(symbol) {\n      var isNewSymbol = this.push(symbol);\n      if (!!this.node && isNewSymbol) {\n        symbol.mount(this.node);\n      }\n      return isNewSymbol;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(target) {\n      var _this = this;\n      if (!!this.node) {\n        return;\n      }\n      this.node = target;\n      // Already added symbols needs to be mounted\n      this.symbols.forEach(function (symbol) {\n        symbol.mount(target);\n      });\n      // Create symbols from existing DOM nodes, add and mount them\n      target.querySelectorAll(\"symbol\").forEach(function (symbolNode) {\n        var symbol = BrowserSymbol.createFromExistingNode(symbolNode);\n        _this.add(symbol);\n      });\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(target) {\n      var prepend = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n      if (!!this.node) {\n        return this.node;\n      }\n      this.node = this.render();\n      if (prepend && target.childNodes[0]) {\n        target.insertBefore(this.node, target.firstChild);\n      } else {\n        target.appendChild(this.node);\n      }\n      return this.node;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var el = document.createElementNS(namespaceURI, \"svg\");\n      Object.entries(this.config.attrs).forEach(function (entry) {\n        return el.setAttribute(entry[0], entry[1]);\n      });\n      this.symbols.forEach(function (symbol) {\n        return el.appendChild(symbol.node);\n      });\n      return el;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.node && this.node.parentNode && this.node.parentNode.removeChild(this.node);\n    }\n  }]);\n  return BrowserSprite;\n}();","map":{"version":3,"names":["BrowserSymbol","namespaceURI","BrowserSprite","config","arguments","length","_define_property","Map","attrs","Object","assign","key","push","symbol","symbols","existing","has","id","set","add","isNewSymbol","node","mount","attach","target","forEach","querySelectorAll","symbolNode","createFromExistingNode","_this","prepend","render","childNodes","insertBefore","firstChild","appendChild","el","document","createElementNS","entries","entry","setAttribute","unmount","parentNode","removeChild"],"sources":["../src/browser-sprite.ts"],"sourcesContent":["import { BrowserSymbol } from './browser-symbol';\n\nconst namespaceURI = 'http://www.w3.org/2000/svg';\n\nexport interface SpriteConfig {\n  attrs?: Record<string, string>;\n}\n\nexport class BrowserSprite {\n  private symbols: Map<string, BrowserSymbol> = new Map();\n  private config: SpriteConfig = {\n    attrs: {\n      'xmlns': namespaceURI,\n      'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n      'style': 'position:absolute;width:0;height:0',\n      'aria-hidden': 'true',\n    },\n  };\n\n  node: Element | null = null;\n\n  constructor(config: SpriteConfig = {}) {\n    Object.assign(this.config.attrs!, config.attrs);\n  }\n\n  private push(symbol: BrowserSymbol) {\n    const { symbols } = this;\n    const existing = symbols.has(symbol.id);\n\n    symbols.set(symbol.id, symbol);\n\n    return !existing;\n  }\n\n  add(symbol: BrowserSymbol) {\n    const isNewSymbol = this.push(symbol);\n\n    if (!!this.node && isNewSymbol) {\n      symbol.mount(this.node);\n    }\n\n    return isNewSymbol;\n  }\n\n  attach(target: Element) {\n    if (!!this.node) {\n      return;\n    }\n\n    this.node = target;\n\n    // Already added symbols needs to be mounted\n    this.symbols.forEach((symbol) => {\n      symbol.mount(target);\n    });\n\n    // Create symbols from existing DOM nodes, add and mount them\n    target.querySelectorAll('symbol').forEach((symbolNode: Element) => {\n      const symbol = BrowserSymbol.createFromExistingNode(symbolNode);\n      this.add(symbol);\n    });\n  }\n\n  mount(target: Node, prepend = false) {\n    if (!!this.node) {\n      return this.node;\n    }\n\n    this.node = this.render();\n\n    if (prepend && target.childNodes[0]) {\n      target.insertBefore(this.node, target.firstChild);\n    } else {\n      target.appendChild(this.node);\n    }\n\n    return this.node;\n  }\n\n  private render() {\n    const el = document.createElementNS(namespaceURI, 'svg');\n\n    Object.entries(this.config.attrs!).forEach((entry) => el.setAttribute(entry[0], entry[1]));\n    this.symbols.forEach((symbol) => el.appendChild(symbol.node));\n\n    return el;\n  }\n\n  unmount() {\n    this.node && this.node.parentNode && this.node.parentNode.removeChild(this.node);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}