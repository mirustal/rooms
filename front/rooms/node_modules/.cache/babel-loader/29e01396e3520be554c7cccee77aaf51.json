{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Tappable } from \"../Tappable/Tappable\";\nimport { Subhead } from \"../Typography/Subhead/Subhead\";\nimport { RichCellIcon } from \"./RichCellIcon/RichCellIcon\";\nvar sizeYClassNames = _define_property({\n  none: \"vkuiRichCell--sizeY-none\"\n}, SizeType.COMPACT, \"vkuiRichCell--sizeY-compact\");\n/**\n * @see https://vkcom.github.io/VKUI/#/RichCell\n */\nexport var RichCell = function (_param) {\n  var subhead = _param.subhead,\n    children = _param.children,\n    text = _param.text,\n    caption = _param.caption,\n    before = _param.before,\n    after = _param.after,\n    afterCaption = _param.afterCaption,\n    bottom = _param.bottom,\n    actions = _param.actions,\n    multiline = _param.multiline,\n    className = _param.className,\n    restProps = _object_without_properties(_param, [\"subhead\", \"children\", \"text\", \"caption\", \"before\", \"after\", \"afterCaption\", \"bottom\", \"actions\", \"multiline\", \"className\"]);\n  var _useAdaptivity = useAdaptivity(),\n    _useAdaptivity_sizeY = _useAdaptivity.sizeY,\n    sizeY = _useAdaptivity_sizeY === void 0 ? \"none\" : _useAdaptivity_sizeY;\n  return /*#__PURE__*/React.createElement(Tappable, _object_spread_props(_object_spread({}, restProps), {\n    className: classNames(\"vkuiRichCell\", !multiline && \"vkuiRichCell--text-ellipsis\", sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY], className)\n  }), before && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__before\"\n  }, before), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__in\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__content\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__content-before\"\n  }, subhead && /*#__PURE__*/React.createElement(Subhead, {\n    Component: \"div\",\n    className: \"vkuiRichCell__subhead\"\n  }, subhead), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__children\"\n  }, children), text && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__text\"\n  }, text), caption && /*#__PURE__*/React.createElement(Subhead, {\n    Component: \"div\",\n    className: \"vkuiRichCell__caption\"\n  }, caption)), (after || afterCaption) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__content-after\"\n  }, after && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__after-children\"\n  }, after), afterCaption && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__after-caption\"\n  }, afterCaption))), bottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__bottom\"\n  }, bottom), actions && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiRichCell__actions\"\n  }, actions)));\n};\nRichCell.Icon = RichCellIcon;","map":{"version":3,"names":["React","classNames","useAdaptivity","SizeType","Tappable","Subhead","RichCellIcon","sizeYClassNames","_define_property","none","COMPACT","RichCell","_param","subhead","children","text","caption","before","after","afterCaption","bottom","actions","multiline","className","restProps","_object_without_properties","_useAdaptivity","_useAdaptivity_sizeY","sizeY","createElement","_object_spread_props","_object_spread","REGULAR","Component","Icon"],"sources":["../../../src/components/RichCell/RichCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { SizeType } from '../../lib/adaptivity';\nimport { Tappable, TappableProps } from '../Tappable/Tappable';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport { RichCellIcon } from './RichCellIcon/RichCellIcon';\nimport styles from './RichCell.module.css';\n\nconst sizeYClassNames = {\n  none: styles['RichCell--sizeY-none'],\n  [SizeType.COMPACT]: styles['RichCell--sizeY-compact'],\n};\n\nexport interface RichCellProps extends TappableProps {\n  /**\n   * Контейнер для текста над `children`.\n   */\n  subhead?: React.ReactNode;\n  /**\n   * Контейнер для текста под `children`.\n   */\n  text?: React.ReactNode;\n  /**\n   * Контейнер для текста под `text`.\n   */\n  caption?: React.ReactNode;\n  /**\n   * Контейнер для контента под `caption`. Например `<UsersStack size=\"m\" />`.\n   */\n  bottom?: React.ReactNode;\n  /**\n   * Кнопки-действия. Принимает [`Button`](https://vkcom.github.io/VKUI/#/Button) с параметрами:\n   *\n   * - `mode=\"primary\" size=\"s\"`\n   * - `mode=\"secondary\" size=\"s\"`\n   *\n   * Для набора кнопок используйте [`ButtonGroup`](https://vkcom.github.io/VKUI/#/ButtonGroup) с параметрами:\n   *\n   * - `mode=\"horizontal\" gap=\"s\" stretched`\n   */\n  actions?: React.ReactNode;\n  /**\n   * `<Avatar size={40|48|72} />`.\n   */\n  before?: React.ReactNode;\n  /**\n   * Иконка 28 или текст.\n   */\n  after?: React.ReactNode;\n  /**\n   * Текст под `after`.\n   */\n  afterCaption?: React.ReactNode;\n  /**\n   * Убирает анимацию нажатия.\n   */\n  disabled?: boolean;\n  /**\n   * Включает многострочный режим для `subhead`, `children`, `text` и `caption`.\n   */\n  multiline?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/RichCell\n */\nexport const RichCell = ({\n  subhead,\n  children,\n  text,\n  caption,\n  before,\n  after,\n  afterCaption,\n  bottom,\n  actions,\n  multiline,\n  className,\n  ...restProps\n}: RichCellProps) => {\n  const { sizeY = 'none' } = useAdaptivity();\n\n  return (\n    <Tappable\n      {...restProps}\n      className={classNames(\n        styles['RichCell'],\n        !multiline && styles['RichCell--text-ellipsis'],\n        sizeY !== SizeType.REGULAR && sizeYClassNames[sizeY],\n        className,\n      )}\n    >\n      {before && <div className={styles['RichCell__before']}>{before}</div>}\n      <div className={styles['RichCell__in']}>\n        <div className={styles['RichCell__content']}>\n          <div className={styles['RichCell__content-before']}>\n            {subhead && (\n              <Subhead Component=\"div\" className={styles['RichCell__subhead']}>\n                {subhead}\n              </Subhead>\n            )}\n            <div className={styles['RichCell__children']}>{children}</div>\n            {text && <div className={styles['RichCell__text']}>{text}</div>}\n            {caption && (\n              <Subhead Component=\"div\" className={styles['RichCell__caption']}>\n                {caption}\n              </Subhead>\n            )}\n          </div>\n          {(after || afterCaption) && (\n            <div className={styles['RichCell__content-after']}>\n              {after && <div className={styles['RichCell__after-children']}>{after}</div>}\n              {afterCaption && (\n                <div className={styles['RichCell__after-caption']}>{afterCaption}</div>\n              )}\n            </div>\n          )}\n        </div>\n        {bottom && <div className={styles['RichCell__bottom']}>{bottom}</div>}\n        {actions && <div className={styles['RichCell__actions']}>{actions}</div>}\n      </div>\n    </Tappable>\n  );\n};\n\nRichCell.Icon = RichCellIcon;\n"],"mappings":";;;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAC3B,SAASC,aAAa,QAAQ;AAC9B,SAASC,QAAQ,QAAQ;AACzB,SAASC,QAAQ,QAAuB;AACxC,SAASC,OAAO,QAAQ;AACxB,SAASC,YAAY,QAAQ;AAG7B,IAAMC,eAAA,GAAAC,gBAAA;EACJC,IAAI;GACHN,QAAA,CAASO,OAAO;AAqDnB;;;AAGA,OAAO,IAAMC,QAAA,GAAW,SAAAA,CAAAC,MAAA;MACtBC,OAAA,GAAAD,MAAA,CAAAC,OAAA;IACAC,QAAA,GAAAF,MAAA,CAAAE,QAAA;IACAC,IAAA,GAAAH,MAAA,CAAAG,IAAA;IACAC,OAAA,GAAAJ,MAAA,CAAAI,OAAA;IACAC,MAAA,GAAAL,MAAA,CAAAK,MAAA;IACAC,KAAA,GAAAN,MAAA,CAAAM,KAAA;IACAC,YAAA,GAAAP,MAAA,CAAAO,YAAA;IACAC,MAAA,GAAAR,MAAA,CAAAQ,MAAA;IACAC,OAAA,GAAAT,MAAA,CAAAS,OAAA;IACAC,SAAA,GAAAV,MAAA,CAAAU,SAAA;IACAC,SAAA,GAAAX,MAAA,CAAAW,SAAA;IACGC,SAAA,GAAAC,0BAAA,CAAAb,MAAA,GAXH,WACA,YACA,QACA,WACA,UACA,SACA,gBACA,UACA,WACA,aACA,Y;EAGA,IAA2Bc,cAAA,GAAAxB,aAAA;IAAAyB,oBAAA,GAAAD,cAAA,CAAnBE,KAAA;IAAAA,KAAA,GAAAD,oBAAA,cAAQ,SAAAA,oBAAA;EAEhB,oBACE3B,KAAA,CAAA6B,aAAA,CAACzB,QAAA,EAAA0B,oBAAA,CAAAC,cAAA,KACKP,SAAA;IACJD,SAAA,EAAWtB,UAAA,iBAET,CAACqB,SAAA,mCACDM,KAAA,KAAUzB,QAAA,CAAS6B,OAAO,IAAIzB,eAAe,CAACqB,KAAA,CAAM,EACpDL,SAAA;MAGDN,MAAA,iBAAUjB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAA+BN,MAAA,gBACxDjB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;kBACZvB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;kBACZvB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KACXV,OAAA,iBACCb,KAAA,CAAA6B,aAAA,CAACxB,OAAA;IAAQ4B,SAAA,EAAU;IAAMV,SAAS;KAC/BV,OAAA,gBAGLb,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAAiCT,QAAA,GAC9CC,IAAA,iBAAQf,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAA6BR,IAAA,GACnDC,OAAA,iBACChB,KAAA,CAAA6B,aAAA,CAACxB,OAAA;IAAQ4B,SAAA,EAAU;IAAMV,SAAS;KAC/BP,OAAA,IAIN,CAACE,KAAA,IAASC,YAAW,kBACpBnB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KACXL,KAAA,iBAASlB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAAuCL,KAAA,GAC9DC,YAAA,iBACCnB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAAsCJ,YAAA,KAK3DC,MAAA,iBAAUpB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAA+BH,MAAA,GACvDC,OAAA,iBAAWrB,KAAA,CAAA6B,aAAA,CAAC;IAAIN,SAAS;KAAgCF,OAAA;AAIlE;AAEAV,QAAA,CAASuB,IAAI,GAAG5B,YAAA"},"metadata":{},"sourceType":"module"}