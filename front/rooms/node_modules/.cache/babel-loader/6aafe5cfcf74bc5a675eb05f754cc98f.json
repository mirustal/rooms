{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nvar TransitionDirectionContext = /*#__PURE__*/React.createContext(undefined);\nexport var NavTransitionDirectionProvider = function (param) {\n  var children = param.children,\n    isBackProp = param.isBack;\n  var parentIsBack = React.useContext(TransitionDirectionContext);\n  // if local isBack is undefined then transition happend on the parent side (probably Root)\n  var isBack = isBackProp !== undefined ? isBackProp : parentIsBack;\n  // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n  var _React_useState = _sliced_to_array(React.useState(isBack), 1),\n    isBackOnMount = _React_useState[0];\n  return /*#__PURE__*/React.createElement(TransitionDirectionContext.Provider, {\n    value: isBackOnMount\n  }, children);\n};\nexport var useNavDirection = function () {\n  var isBack = React.useContext(TransitionDirectionContext);\n  var transitionDirection = isBack === undefined ? undefined : isBack ? \"backwards\" : \"forwards\";\n  return transitionDirection;\n};","map":{"version":3,"names":["React","TransitionDirectionContext","createContext","undefined","NavTransitionDirectionProvider","param","children","isBackProp","isBack","parentIsBack","useContext","_React_useState","_sliced_to_array","useState","isBackOnMount","createElement","Provider","value","useNavDirection","transitionDirection"],"sources":["../../../src/components/NavTransitionDirectionContext/NavTransitionDirectionContext.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype DirectionContextType = boolean | undefined;\n\nconst TransitionDirectionContext = React.createContext<DirectionContextType>(undefined);\n\nexport const NavTransitionDirectionProvider = ({\n  children,\n  isBack: isBackProp,\n}: React.PropsWithChildren<{ isBack: DirectionContextType }>) => {\n  const parentIsBack = React.useContext(TransitionDirectionContext);\n  // if local isBack is undefined then transition happend on the parent side (probably Root)\n  const isBack = isBackProp !== undefined ? isBackProp : parentIsBack;\n\n  // 'direction' should always represent the direction state of the panel on mount\n  // save the on mount value of the panel to the state\n  // to make sure we don't trigger new re-render for the panel\n  // due to change in the prop passed to provider\n  const [isBackOnMount] = React.useState<DirectionContextType>(isBack);\n\n  return (\n    <TransitionDirectionContext.Provider value={isBackOnMount}>\n      {children}\n    </TransitionDirectionContext.Provider>\n  );\n};\n\nexport type TransitionDirection = undefined | 'forwards' | 'backwards';\n\nexport const useNavDirection = (): TransitionDirection => {\n  const isBack = React.useContext(TransitionDirectionContext);\n  const transitionDirection = isBack === undefined ? undefined : isBack ? 'backwards' : 'forwards';\n\n  return transitionDirection;\n};\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AAIvB,IAAMC,0BAAA,gBAA6BD,KAAA,CAAME,aAAa,CAAuBC,SAAA;AAE7E,OAAO,IAAMC,8BAAA,GAAiC,SAAAA,CAAAC,KAAA;MAC5CC,QAAA,GAAAD,KAAA,CAAAC,QAAA;IACAC,UAAQ,GAAAF,KAAA,CAARG,MAAA;EAEA,IAAMC,YAAA,GAAeT,KAAA,CAAMU,UAAU,CAACT,0BAAA;EACtC;EACA,IAAMO,MAAA,GAASD,UAAA,KAAeJ,SAAA,GAAYI,UAAA,GAAaE,YAAA;EAEvD;EACA;EACA;EACA;EACA,IAAwBE,eAAA,GAAAC,gBAAA,CAAAZ,KAAA,CAAMa,QAAQ,CAAuBL,MAAA;IAAtDM,aAAA,GAAiBH,eAAA;EAExB,oBACEX,KAAA,CAAAe,aAAA,CAACd,0BAAA,CAA2Be,QAAQ;IAACC,KAAA,EAAOH;KACzCR,QAAA;AAGP;AAIA,OAAO,IAAMY,eAAA,GAAkB,SAAAA,CAAA;EAC7B,IAAMV,MAAA,GAASR,KAAA,CAAMU,UAAU,CAACT,0BAAA;EAChC,IAAMkB,mBAAA,GAAsBX,MAAA,KAAWL,SAAA,GAAYA,SAAA,GAAYK,MAAA,GAAS,cAAc;EAEtF,OAAOW,mBAAA;AACT"},"metadata":{},"sourceType":"module"}