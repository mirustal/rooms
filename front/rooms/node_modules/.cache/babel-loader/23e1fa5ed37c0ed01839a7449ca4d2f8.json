{"ast":null,"code":"import { getAccessToken, clearTheStorage, getFromStorage, getLaunchParams, getVkUserId, pushToStorage } from \"../bridge/bridgeLib\";\nimport { VkStorageKeys } from \"../bridge/storageKeys\";\nimport { ServerApiUrl } from \"../config\";\nexport class RoomInfo {\n  constructor(id, name, avatar, members, channels) {\n    this.id = id;\n    this.name = name;\n    this.avatar = avatar;\n    this.members = members;\n    this.channels = channels;\n    this.isFavourite = false;\n  }\n\n  setFavourite(isFav) {\n    if (isFav === this.isFavourite) return;\n    this.isFavourite = isFav;\n\n    if (isFav) {\n      getFromStorage(VkStorageKeys.FavouriteRooms).then(favRooms => pushToStorage(VkStorageKeys.FavouriteRooms, favRooms + ',' + this.id));\n    } else {\n      getFromStorage(VkStorageKeys.FavouriteRooms).then(favRooms => pushToStorage(VkStorageKeys.FavouriteRooms, favRooms.replaceAll(this.id, \"\").replaceAll(\",,\", \"\")));\n    }\n  }\n\n}\n\nasync function requestServer(request, data) {\n  let response = undefined;\n  let authToken = await getAccessToken();\n  await fetch(`${ServerApiUrl}/${request}`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": authToken\n    },\n    body: JSON.stringify(data)\n  }).then(data => data.json()).then(json => response = json).catch(error => {\n    console.error(error);\n    alert(error);\n  });\n  console.log(request, \" response:\\n\", response);\n  return response;\n}\n\nasync function requestServerFile(request, data) {\n  let response = undefined;\n  let authToken = await getAccessToken();\n  await fetch(`${ServerApiUrl}/${request}`, {\n    method: \"post\",\n    headers: {\n      \"Authorization\": authToken\n    },\n    body: data\n  }).then(data => data.json()).then(json => response = json).catch(error => {\n    console.error(error);\n    alert(error);\n  });\n  console.log(request, \" response:\\n\", response);\n  return response;\n}\n\nexport async function getJoinedRoomInfos() {\n  let ids = await getFromStorage(VkStorageKeys.JoinedRooms);\n  ids = ids.split(',').filter(x => x !== '');\n  let rooms = [];\n  let response = await requestServer(\"rooms/get\", {\n    room_ids: ids\n  });\n  if (response.rooms) rooms = response.rooms.map(x => Object.assign(new RoomInfo(), x));\n  let favIds = (await getFromStorage(VkStorageKeys.FavouriteRooms)).split(',').filter(x => x !== '');\n\n  for (let room of rooms) {\n    if (favIds.includes(room.id)) {\n      room.isFavourite = true;\n    }\n  }\n\n  return rooms;\n}\nexport async function joinRoom(id) {\n  getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + id));\n  let user_id = (await getLaunchParams()).vk_user_id;\n  let response = await requestServer(\"rooms/join\", {\n    user_id: user_id,\n    room_id: id\n  });\n  return response.room;\n}\nexport async function createRoom(newRoom) {\n  newRoom.addMember((await getLaunchParams()).vk_user_id);\n  getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + newRoom.id));\n  let response = await requestServer(\"rooms/create\", {\n    room_data: newRoom\n  });\n  return response.room;\n}\nexport async function deleteRoom(id) {\n  let response = await requestServer(\"rooms/delete\", {\n    room_id: id\n  });\n  return response.room;\n}\nexport async function editChannel(room) {\n  let response = await requestServer(\"rooms/update\", {\n    room_data: room\n  });\n  return response.room;\n}\nexport async function uploadImage(image) {\n  console.log(image);\n  let response = await requestServer(\"rooms/uploadImage\", {\n    image: image\n  });\n  return response;\n}","map":{"version":3,"names":["getAccessToken","clearTheStorage","getFromStorage","getLaunchParams","getVkUserId","pushToStorage","VkStorageKeys","ServerApiUrl","RoomInfo","constructor","id","name","avatar","members","channels","isFavourite","setFavourite","isFav","FavouriteRooms","then","favRooms","replaceAll","requestServer","request","data","response","undefined","authToken","fetch","method","headers","body","JSON","stringify","json","catch","error","console","alert","log","requestServerFile","getJoinedRoomInfos","ids","JoinedRooms","split","filter","x","rooms","room_ids","map","Object","assign","favIds","room","includes","joinRoom","joinedRooms","user_id","vk_user_id","room_id","createRoom","newRoom","addMember","room_data","deleteRoom","editChannel","uploadImage","image"],"sources":["/Users/mirustal/Documents/project/rooms/front/rooms/src/serverApi/serverApi.js"],"sourcesContent":["import { getAccessToken, clearTheStorage, getFromStorage, getLaunchParams, getVkUserId, pushToStorage } from \"../bridge/bridgeLib\";\nimport { VkStorageKeys } from \"../bridge/storageKeys\";\nimport { ServerApiUrl } from \"../config\";\n\nexport class RoomInfo {\n    constructor(id, name, avatar, members, channels) {\n        this.id = id;\n        this.name = name;\n        this.avatar = avatar;\n        this.members = members;\n        this.channels = channels;\n        this.isFavourite = false;\n    }\n\n    setFavourite(isFav) {\n        if (isFav === this.isFavourite) return\n\n        this.isFavourite = isFav;\n\n        if (isFav) {\n            getFromStorage(VkStorageKeys.FavouriteRooms).then(favRooms => pushToStorage(VkStorageKeys.FavouriteRooms, favRooms + ',' + this.id))\n        } else {\n            getFromStorage(VkStorageKeys.FavouriteRooms).then(favRooms => pushToStorage(VkStorageKeys.FavouriteRooms, favRooms.replaceAll(this.id, \"\").replaceAll(\",,\",\"\")))\n        }\n    }\n}\n\nasync function requestServer(request, data) {\n    let response = undefined;\n    let authToken = await getAccessToken()\n    await fetch(`${ServerApiUrl}/${request}`, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": authToken\n        },\n        body: JSON.stringify(data)\n    })\n        .then(data => data.json())\n        .then((json) => response = json)\n        .catch(error => {\n            console.error(error);\n            alert(error)\n        })\n    console.log(request, \" response:\\n\", response)\n    return response;\n}\n\nasync function requestServerFile(request, data) {\n    let response = undefined;\n    let authToken = await getAccessToken()\n    await fetch(`${ServerApiUrl}/${request}`, {\n        method: \"post\",\n        headers: {\n            \"Authorization\": authToken\n        },\n        body: data\n    })\n        .then(data => data.json())\n        .then((json) => response = json)\n        .catch(error => {\n            console.error(error);\n            alert(error)\n        })\n    console.log(request, \" response:\\n\", response)\n    return response;\n}\n\nexport async function getJoinedRoomInfos() {\n    let ids = await getFromStorage(VkStorageKeys.JoinedRooms);\n    ids = ids.split(',').filter(x => x !== '');\n\n    let rooms = [];\n    let response = await requestServer(\"rooms/get\", { room_ids: ids });\n    if (response.rooms) rooms = response.rooms.map(x => Object.assign(new RoomInfo, x));\n    let favIds = (await getFromStorage(VkStorageKeys.FavouriteRooms)).split(',').filter(x => x !== '');\n    for (let room of rooms) {\n        if (favIds.includes(room.id)) {\n            room.isFavourite = true;\n        }\n    }\n    return rooms;\n}\n\nexport async function joinRoom(id) {\n    getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + id))\n\n    let user_id = (await getLaunchParams()).vk_user_id;\n    let response = await requestServer(\"rooms/join\", { user_id: user_id, room_id: id });\n    return response.room;\n}\n\nexport async function createRoom(newRoom) {\n    newRoom.addMember((await getLaunchParams()).vk_user_id)\n    getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + newRoom.id))\n    let response = await requestServer(\"rooms/create\", { room_data: newRoom });\n    return response.room;\n}\n\nexport async function deleteRoom(id) {\n    let response = await requestServer(\"rooms/delete\", { room_id: id });\n    return response.room;\n}\n\nexport async function editChannel(room) {\n    let response = await requestServer(\"rooms/update\", {room_data: room})\n    return response.room\n}\n\nexport async function uploadImage(image) {\n    console.log(image)\n    let response = await requestServer(\"rooms/uploadImage\", {image: image})\n    return response\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}