{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useBooleanState } from \"../../../hooks/useBooleanState\";\nimport { useExternRef } from \"../../../hooks/useExternRef\";\nimport { useFocusVisible } from \"../../../hooks/useFocusVisible\";\nimport { arrowMiddleware, convertFloatingDataToReactCSSProperties, flipMiddleware, offsetMiddleware, shiftMiddleware, useFloating } from \"../../../lib/floating\";\nimport { FocusVisible } from \"../../FocusVisible/FocusVisible\";\nimport { TooltipBase } from \"../../TooltipBase/TooltipBase\";\nexport var SliderThumb = function (_param) {\n  var className = _param.className,\n    getRootRef = _param.getRootRef,\n    inputProps = _param.inputProps,\n    withTooltip = _param.withTooltip,\n    restProps = _object_without_properties(_param, [\"className\", \"getRootRef\", \"inputProps\", \"withTooltip\"]);\n  var _useFocusVisible = useFocusVisible(false),\n    focusVisible = _useFocusVisible.focusVisible,\n    onBlur = _useFocusVisible.onBlur,\n    onFocus = _useFocusVisible.onFocus;\n  var _React_useState = _sliced_to_array(React.useState(null), 2),\n    arrowRef = _React_useState[0],\n    setArrowRef = _React_useState[1];\n  var memoizedMiddlewares = React.useMemo(function () {\n    return [offsetMiddleware({\n      crossAxis: 0,\n      mainAxis: 15\n    }), flipMiddleware(), shiftMiddleware({\n      padding: 8\n    }), arrowMiddleware({\n      element: arrowRef\n    })];\n  }, [arrowRef]);\n  var _useFloating = useFloating({\n      placement: \"top\",\n      middleware: memoizedMiddlewares\n    }),\n    floatingDataX = _useFloating.x,\n    floatingDataY = _useFloating.y,\n    resolvedPlacement = _useFloating.placement,\n    refs = _useFloating.refs,\n    floatingPositionStrategy = _useFloating.strategy,\n    _useFloating_middlewareData = _useFloating.middlewareData,\n    arrowCoords = _useFloating_middlewareData.arrow,\n    updateTooltipPosition = _useFloating.update;\n  var _useBooleanState = useBooleanState(false),\n    isHovered = _useBooleanState.value,\n    setHoveredTrue = _useBooleanState.setTrue,\n    setHoveredFalse = _useBooleanState.setFalse;\n  var handleRootRef = useExternRef(getRootRef, refs.setReference);\n  var shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n  var inputValue = inputProps && inputProps.value;\n  React.useEffect(function udpateTooltipPositionOnValueChange() {\n    if (shouldShowTooltip && inputValue !== \"undefined\") {\n      updateTooltipPosition();\n    }\n  }, [inputValue, updateTooltipPosition, shouldShowTooltip]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", _object_spread_props(_object_spread({}, restProps), {\n    ref: handleRootRef,\n    onMouseEnter: setHoveredTrue,\n    onMouseLeave: setHoveredFalse,\n    className: classNames(\"vkuiSliderThumb\", focusVisible && \"vkuiSliderThumb--focused\", className)\n  }), /*#__PURE__*/React.createElement(\"input\", _object_spread_props(_object_spread({}, inputProps), {\n    type: \"range\",\n    className: \"vkuiSliderThumb__nativeInput\",\n    \"aria-orientation\": \"horizontal\",\n    onBlur: onBlur,\n    onFocus: onFocus\n  })), /*#__PURE__*/React.createElement(FocusVisible, {\n    visible: focusVisible,\n    mode: \"outside\"\n  })), shouldShowTooltip && /*#__PURE__*/React.createElement(TooltipBase, {\n    appearance: \"neutral\",\n    getRootRef: refs.setFloating,\n    floatingStyle: convertFloatingDataToReactCSSProperties(floatingPositionStrategy, floatingDataX, floatingDataY),\n    arrowCoords: arrowCoords,\n    arrowPlacement: resolvedPlacement,\n    getArrowRef: setArrowRef,\n    text: inputValue\n  }));\n};","map":{"version":3,"names":["React","classNames","useBooleanState","useExternRef","useFocusVisible","arrowMiddleware","convertFloatingDataToReactCSSProperties","flipMiddleware","offsetMiddleware","shiftMiddleware","useFloating","FocusVisible","TooltipBase","SliderThumb","_param","className","getRootRef","inputProps","withTooltip","restProps","_object_without_properties","_useFocusVisible","focusVisible","onBlur","onFocus","_React_useState","_sliced_to_array","useState","arrowRef","setArrowRef","memoizedMiddlewares","useMemo","crossAxis","mainAxis","padding","element","_useFloating","placement","middleware","floatingDataX","x","floatingDataY","y","resolvedPlacement","refs","floatingPositionStrategy","strategy","_useFloating_middlewareData","middlewareData","arrowCoords","arrow","updateTooltipPosition","update","_useBooleanState","isHovered","value","setHoveredTrue","setTrue","setHoveredFalse","setFalse","handleRootRef","setReference","shouldShowTooltip","inputValue","useEffect","udpateTooltipPositionOnValueChange","createElement","Fragment","_object_spread_props","_object_spread","ref","onMouseEnter","onMouseLeave","type","visible","mode","appearance","setFloating","floatingStyle","arrowPlacement","getArrowRef","text"],"sources":["../../../../src/components/Slider/SliderThumb/SliderThumb.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useBooleanState } from '../../../hooks/useBooleanState';\nimport { useExternRef } from '../../../hooks/useExternRef';\nimport { useFocusVisible } from '../../../hooks/useFocusVisible';\nimport {\n  arrowMiddleware,\n  convertFloatingDataToReactCSSProperties,\n  flipMiddleware,\n  offsetMiddleware,\n  shiftMiddleware,\n  useFloating,\n} from '../../../lib/floating';\nimport type { HasDataAttribute, HasRootRef } from '../../../types';\nimport { FocusVisible } from '../../FocusVisible/FocusVisible';\nimport { TooltipBase } from '../../TooltipBase/TooltipBase';\nimport styles from './SliderThumb.module.css';\n\ninterface SliderThumbProps extends HasRootRef<HTMLSpanElement>, HasDataAttribute {\n  className?: string;\n  style?: React.CSSProperties;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement> &\n    React.RefAttributes<HTMLInputElement> &\n    HasDataAttribute;\n  withTooltip?: boolean;\n}\n\nexport const SliderThumb = ({\n  className,\n  getRootRef,\n  inputProps,\n  withTooltip,\n  ...restProps\n}: SliderThumbProps) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible(false);\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [\n      offsetMiddleware({\n        crossAxis: 0,\n        mainAxis: 15,\n      }),\n      flipMiddleware(),\n      shiftMiddleware({ padding: 8 }),\n      arrowMiddleware({\n        element: arrowRef,\n      }),\n    ];\n  }, [arrowRef]);\n\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: { arrow: arrowCoords },\n    update: updateTooltipPosition,\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares,\n  });\n\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse,\n  } = useBooleanState(false);\n\n  const handleRootRef = useExternRef<HTMLSpanElement>(getRootRef, refs.setReference);\n\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(\n    function udpateTooltipPositionOnValueChange() {\n      if (shouldShowTooltip && inputValue !== 'undefined') {\n        updateTooltipPosition();\n      }\n    },\n    [inputValue, updateTooltipPosition, shouldShowTooltip],\n  );\n\n  return (\n    <React.Fragment>\n      <span\n        {...restProps}\n        ref={handleRootRef}\n        onMouseEnter={setHoveredTrue}\n        onMouseLeave={setHoveredFalse}\n        className={classNames(\n          styles['SliderThumb'],\n          focusVisible && styles['SliderThumb--focused'],\n          className,\n        )}\n      >\n        <input\n          {...inputProps}\n          type=\"range\"\n          className={styles['SliderThumb__nativeInput']}\n          aria-orientation=\"horizontal\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n        />\n        <FocusVisible visible={focusVisible} mode=\"outside\" />\n      </span>\n      {shouldShowTooltip && (\n        <TooltipBase\n          appearance=\"neutral\"\n          getRootRef={refs.setFloating}\n          floatingStyle={convertFloatingDataToReactCSSProperties(\n            floatingPositionStrategy,\n            floatingDataX,\n            floatingDataY,\n          )}\n          arrowCoords={arrowCoords}\n          arrowPlacement={resolvedPlacement}\n          getArrowRef={setArrowRef}\n          text={inputValue}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}