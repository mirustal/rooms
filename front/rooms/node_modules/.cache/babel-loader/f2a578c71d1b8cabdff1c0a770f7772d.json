{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\n/**\n * Хук, который позволяет управлять видимостью ползунка скроллбара.\n * @param autoHideScrollbar - скрывать ли ползунок скроллбара\n * @param autoHideScrollbarDelay - через какое кол-во миллисекунд ползунок скроллбара скрывается\n * @returns Объект, содержащий параметры, которые позволяют управлять видимостью ползунка\n */\nexport var useTrackerVisibility = function () {\n  var autoHideScrollbar = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false,\n    autoHideScrollbarDelay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;\n  var _React_useState = _sliced_to_array(React.useState(!autoHideScrollbar), 2),\n    trackerVisible = _React_useState[0],\n    setTrackerVisible = _React_useState[1];\n  var isMouseOver = React.useRef(false);\n  var isTrackerDragging = React.useRef(false);\n  var _useTimeout = useTimeout(function () {\n      return setTrackerVisible(false);\n    }, autoHideScrollbarDelay),\n    setVisibilityTimeout = _useTimeout.set,\n    clearVisibilityTimeout = _useTimeout.clear;\n  var onTrackerDragStart = React.useCallback(function () {\n    clearVisibilityTimeout();\n    setTrackerVisible(true);\n    isTrackerDragging.current = true;\n  }, [clearVisibilityTimeout]);\n  var onTrackerDragStop = React.useCallback(function () {\n    isTrackerDragging.current = false;\n    if (!isMouseOver.current) {\n      setVisibilityTimeout();\n    }\n  }, [setVisibilityTimeout, isMouseOver]);\n  /**\n  * Позволяет \"запланировать\" скрытие ползунка через delay миллисекунд. Если тайм-аут не успевает сработать, то каждый\n  * последующий вызов функции откладывает скрытие ползунка на delay миллисекунд\n  */\n  var queueTrackerVisibility = React.useCallback(function () {\n    if (isTrackerDragging.current) {\n      return;\n    }\n    setTrackerVisible(true);\n    setVisibilityTimeout();\n  }, [setVisibilityTimeout]);\n  var onTrackerMouseEnter = React.useCallback(function () {\n    clearVisibilityTimeout();\n    isMouseOver.current = true;\n    setTrackerVisible(true);\n  }, [clearVisibilityTimeout]);\n  var onTrackerMouseLeave = React.useCallback(function () {\n    queueTrackerVisibility();\n    isMouseOver.current = false;\n  }, [queueTrackerVisibility]);\n  var onTargetScroll = React.useCallback(function () {\n    queueTrackerVisibility();\n  }, [queueTrackerVisibility]);\n  return {\n    trackerVisible: trackerVisible,\n    onTrackerDragStart: onTrackerDragStart,\n    onTrackerDragStop: onTrackerDragStop,\n    onTrackerMouseEnter: onTrackerMouseEnter,\n    onTrackerMouseLeave: onTrackerMouseLeave,\n    onTargetScroll: onTargetScroll\n  };\n};","map":{"version":3,"names":["React","useTimeout","useTrackerVisibility","autoHideScrollbar","arguments","length","autoHideScrollbarDelay","_React_useState","_sliced_to_array","useState","trackerVisible","setTrackerVisible","isMouseOver","useRef","isTrackerDragging","_useTimeout","setVisibilityTimeout","set","clearVisibilityTimeout","clear","onTrackerDragStart","useCallback","current","onTrackerDragStop","queueTrackerVisibility","onTrackerMouseEnter","onTrackerMouseLeave","onTargetScroll"],"sources":["../../../src/components/CustomScrollView/useTrackerVisibility.ts"],"sourcesContent":["import * as React from 'react';\nimport { useTimeout } from '../../hooks/useTimeout';\n\n/**\n * Хук, который позволяет управлять видимостью ползунка скроллбара.\n * @param autoHideScrollbar - скрывать ли ползунок скроллбара\n * @param autoHideScrollbarDelay - через какое кол-во миллисекунд ползунок скроллбара скрывается\n * @returns Объект, содержащий параметры, которые позволяют управлять видимостью ползунка\n */\nexport const useTrackerVisibility = (\n  autoHideScrollbar = false,\n  autoHideScrollbarDelay = 500,\n): TrackerVisibilityProps => {\n  const [trackerVisible, setTrackerVisible] = React.useState(!autoHideScrollbar);\n  const isMouseOver = React.useRef(false);\n  const isTrackerDragging = React.useRef(false);\n\n  const { set: setVisibilityTimeout, clear: clearVisibilityTimeout } = useTimeout(\n    () => setTrackerVisible(false),\n    autoHideScrollbarDelay,\n  );\n\n  const onTrackerDragStart = React.useCallback(() => {\n    clearVisibilityTimeout();\n    setTrackerVisible(true);\n    isTrackerDragging.current = true;\n  }, [clearVisibilityTimeout]);\n\n  const onTrackerDragStop = React.useCallback(() => {\n    isTrackerDragging.current = false;\n    if (!isMouseOver.current) {\n      setVisibilityTimeout();\n    }\n  }, [setVisibilityTimeout, isMouseOver]);\n\n  /**\n   * Позволяет \"запланировать\" скрытие ползунка через delay миллисекунд. Если тайм-аут не успевает сработать, то каждый\n   * последующий вызов функции откладывает скрытие ползунка на delay миллисекунд\n   */\n  const queueTrackerVisibility = React.useCallback(() => {\n    if (isTrackerDragging.current) {\n      return;\n    }\n    setTrackerVisible(true);\n    setVisibilityTimeout();\n  }, [setVisibilityTimeout]);\n\n  const onTrackerMouseEnter = React.useCallback(() => {\n    clearVisibilityTimeout();\n    isMouseOver.current = true;\n    setTrackerVisible(true);\n  }, [clearVisibilityTimeout]);\n\n  const onTrackerMouseLeave = React.useCallback(() => {\n    queueTrackerVisibility();\n    isMouseOver.current = false;\n  }, [queueTrackerVisibility]);\n\n  const onTargetScroll = React.useCallback(() => {\n    queueTrackerVisibility();\n  }, [queueTrackerVisibility]);\n\n  return {\n    trackerVisible,\n    onTrackerDragStart,\n    onTrackerDragStop,\n    onTrackerMouseEnter,\n    onTrackerMouseLeave,\n    onTargetScroll,\n  };\n};\n\nexport interface TrackerOptionsProps {\n  /**\n   * Скрывать ли ползунок скроллбара\n   */\n  autoHideScrollbar?: boolean;\n  /**\n   * Через какое кол-во миллисекунд ползунок скроллбара скрывается\n   */\n  autoHideScrollbarDelay?: number;\n}\n\nexport interface TrackerVisibilityProps {\n  /**\n   * Отвечает за видимость ползунка\n   */\n  trackerVisible: boolean;\n  /**\n   * Функция для обработки события у блока со скроллом\n   */\n  onTargetScroll(this: void): void;\n  /**\n   * Функция для обработки начала drag event ползунка\n   */\n  onTrackerDragStart(this: void): void;\n  /**\n   * Функция для обработки окончания drag event ползунка\n   */\n  onTrackerDragStop(this: void): void;\n  /**\n   * Функция для обработки mouseLeave event ползунка\n   */\n  onTrackerMouseEnter(this: void): void;\n  /**\n   * Функция для обработки mouseEnter event ползунка\n   */\n  onTrackerMouseLeave(this: void): void;\n}\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,QAAQ;AAE3B;;;;;;AAMA,OAAO,IAAMC,oBAAA,GAAuB,SAAAA,CAAA;MAClCC,iBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAoB;IACpBE,sBAAA,GAAAF,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAyB;EAEzB,IAA4CG,eAAA,GAAAC,gBAAA,CAAAR,KAAA,CAAMS,QAAQ,CAAC,CAACN,iBAAA;IAArDO,cAAA,GAAqCH,eAAA;IAArBI,iBAAA,GAAqBJ,eAAA;EAC5C,IAAMK,WAAA,GAAcZ,KAAA,CAAMa,MAAM,CAAC;EACjC,IAAMC,iBAAA,GAAoBd,KAAA,CAAMa,MAAM,CAAC;EAEvC,IAAqEE,WAAA,GAAAd,UAAA,CACnE;aAAMU,iBAAA,CAAkB;OACxBL,sBAAA;IAFMU,oBAAK,GAAwDD,WAAA,CAA7DE,GAAA;IAA2BC,sBAAO,GAA2BH,WAAA,CAAlCI,KAAA;EAKnC,IAAMC,kBAAA,GAAqBpB,KAAA,CAAMqB,WAAW,CAAC;IAC3CH,sBAAA;IACAP,iBAAA,CAAkB;IAClBG,iBAAA,CAAkBQ,OAAO,GAAG;EAC9B,GAAG,CAACJ,sBAAA,CAAuB;EAE3B,IAAMK,iBAAA,GAAoBvB,KAAA,CAAMqB,WAAW,CAAC;IAC1CP,iBAAA,CAAkBQ,OAAO,GAAG;IAC5B,IAAI,CAACV,WAAA,CAAYU,OAAO,EAAE;MACxBN,oBAAA;IACF;EACF,GAAG,CAACA,oBAAA,EAAsBJ,WAAA,CAAY;EAEtC;;;;EAIA,IAAMY,sBAAA,GAAyBxB,KAAA,CAAMqB,WAAW,CAAC;IAC/C,IAAIP,iBAAA,CAAkBQ,OAAO,EAAE;MAC7B;IACF;IACAX,iBAAA,CAAkB;IAClBK,oBAAA;EACF,GAAG,CAACA,oBAAA,CAAqB;EAEzB,IAAMS,mBAAA,GAAsBzB,KAAA,CAAMqB,WAAW,CAAC;IAC5CH,sBAAA;IACAN,WAAA,CAAYU,OAAO,GAAG;IACtBX,iBAAA,CAAkB;EACpB,GAAG,CAACO,sBAAA,CAAuB;EAE3B,IAAMQ,mBAAA,GAAsB1B,KAAA,CAAMqB,WAAW,CAAC;IAC5CG,sBAAA;IACAZ,WAAA,CAAYU,OAAO,GAAG;EACxB,GAAG,CAACE,sBAAA,CAAuB;EAE3B,IAAMG,cAAA,GAAiB3B,KAAA,CAAMqB,WAAW,CAAC;IACvCG,sBAAA;EACF,GAAG,CAACA,sBAAA,CAAuB;EAE3B,OAAO;IACLd,cAAA,EAAAA,cAAA;IACAU,kBAAA,EAAAA,kBAAA;IACAG,iBAAA,EAAAA,iBAAA;IACAE,mBAAA,EAAAA,mBAAA;IACAC,mBAAA,EAAAA,mBAAA;IACAC,cAAA,EAAAA;EACF;AACF"},"metadata":{},"sourceType":"module"}