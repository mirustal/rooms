{"ast":null,"code":"import { getFromStorage, getLaunchParams, pushToStorage } from \"../bridge/bridgeLib\";\nimport { VkStorageKeys } from \"../bridge/storageKeys\";\nimport { ServerApiUrl } from \"../config\";\nexport class RoomInfo {\n  constructor(id, name, avatar, members, channels) {\n    this.id = id;\n    this.name = name;\n    this.avatar = avatar;\n    this.members = members;\n    this.channels = channels;\n  }\n}\nasync function requestServer(request, data) {\n  let response = undefined;\n  await fetch(`${ServerApiUrl}/${request}`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(data => data.json()).then(json => response = json).catch(error => {\n    console.error(error);\n    alert(error);\n  });\n  console.log(request, \" response:\\n\", response);\n  return response;\n}\nexport async function getJoinedRoomInfos() {\n  let ids = await getFromStorage(VkStorageKeys.JoinedRooms);\n  ids = ids.split(',').filter(x => x !== '');\n  let response = await requestServer(\"rooms/get\", {\n    room_ids: ids\n  });\n  if (response.rooms) return response.rooms.map(x => Object.assign(new RoomInfo(), x));\n  return [];\n}\nexport async function joinRoom(id) {\n  getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + id));\n  let user_id = (await getLaunchParams()).vk_user_id;\n  let response = await requestServer(\"rooms/join\", {\n    user_id: user_id,\n    room_id: id\n  });\n  return response.room;\n}\nexport async function createRoom(newRoom) {\n  newRoom.addMember((await getLaunchParams()).vk_user_id);\n  getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + newRoom.id));\n  let response = await requestServer(\"rooms/create\", {\n    room_data: newRoom\n  });\n  return response.room;\n}\nexport async function deleteRoom(id) {\n  let response = await requestServer(\"rooms/delete\", {\n    room_id: id\n  });\n  return response.room;\n}\nexport async function renameChannel(room) {\n  let response = await requestServer(\"rooms/edit\", {\n    room_data: room\n  });\n  return response.room;\n}","map":{"version":3,"names":["getFromStorage","getLaunchParams","pushToStorage","VkStorageKeys","ServerApiUrl","RoomInfo","constructor","id","name","avatar","members","channels","requestServer","request","data","response","undefined","fetch","method","headers","body","JSON","stringify","then","json","catch","error","console","alert","log","getJoinedRoomInfos","ids","JoinedRooms","split","filter","x","room_ids","rooms","map","Object","assign","joinRoom","joinedRooms","user_id","vk_user_id","room_id","room","createRoom","newRoom","addMember","room_data","deleteRoom","renameChannel"],"sources":["/Users/mirustal/Documents/project/rooms/front/rooms/src/serverApi/serverApi.js"],"sourcesContent":["import { getFromStorage, getLaunchParams, pushToStorage } from \"../bridge/bridgeLib\";\nimport { VkStorageKeys } from \"../bridge/storageKeys\";\nimport { ServerApiUrl } from \"../config\";\n\nexport class RoomInfo {\n    constructor(id, name, avatar, members, channels) {\n        this.id = id;\n        this.name = name;\n        this.avatar = avatar;\n        this.members = members;\n        this.channels = channels;\n    }\n}\n\nasync function requestServer(request, data) {\n    let response = undefined;\n    await fetch(`${ServerApiUrl}/${request}`, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data)\n    })\n        .then(data => data.json())\n        .then((json) => response = json)\n        .catch(error => {\n            console.error(error);\n            alert(error)\n        })\n    console.log(request, \" response:\\n\", response)\n    return response;\n}\n\nexport async function getJoinedRoomInfos() {\n    let ids = await getFromStorage(VkStorageKeys.JoinedRooms);\n    ids = ids.split(',').filter(x => x !== '')\n\n    let response = await requestServer(\"rooms/get\", { room_ids: ids });\n    if (response.rooms) return response.rooms.map(x => Object.assign(new RoomInfo, x));\n    return []\n}\n\nexport async function joinRoom(id) {\n    getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + id))\n\n    let user_id = (await getLaunchParams()).vk_user_id;\n    let response = await requestServer(\"rooms/join\", { user_id: user_id, room_id: id });\n    return response.room;\n}\n\nexport async function createRoom(newRoom) {\n    newRoom.addMember((await getLaunchParams()).vk_user_id)\n    getFromStorage(VkStorageKeys.JoinedRooms).then(joinedRooms => pushToStorage(VkStorageKeys.JoinedRooms, joinedRooms + ',' + newRoom.id))\n    let response = await requestServer(\"rooms/create\", { room_data: newRoom });\n    return response.room;\n}\n\nexport async function deleteRoom(id) {\n    let response = await requestServer(\"rooms/delete\", { room_id: id });\n    return response.room;\n}\n\nexport async function renameChannel(room) {\n    let response = await requestServer(\"rooms/edit\", { room_data: room })\n    return response.room\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}