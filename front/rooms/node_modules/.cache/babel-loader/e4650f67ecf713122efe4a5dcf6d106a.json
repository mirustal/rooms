{"ast":null,"code":"import { _ as _class_call_check } from \"@swc/helpers/_/_class_call_check\";\nimport { _ as _create_class } from \"@swc/helpers/_/_create_class\";\nimport { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport { escapeRegExp } from \"../regexp\";\nexport var Replacer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Replacer(map) {\n    _class_call_check(this, Replacer);\n    _define_property(this, \"regexp\", void 0);\n    _define_property(this, \"map\", void 0);\n    this.map = map;\n  }\n  _create_class(Replacer, [{\n    key: \"build\",\n    value: function build() {\n      if (this.regexp) {\n        return;\n      }\n      var groups = Object.keys(this.map).map(escapeRegExp).sort(function (a, b) {\n        return b.length - a.length;\n      });\n      var pattern = \"(?:\".concat(groups.join(\"|\"), \")\");\n      this.regexp = new RegExp(pattern, \"g\");\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(string) {\n      var _this = this;\n      if (!string) {\n        return \"\";\n      }\n      this.build();\n      return string.replace(this.regexp, function (substring) {\n        return _this.map[substring];\n      });\n    }\n  }]);\n  return Replacer;\n}();","map":{"version":3,"names":["escapeRegExp","Replacer","map","_define_property","key","build","regexp","groups","Object","keys","sort","a","b","length","pattern","concat","join","RegExp","replace","string","substring","_this"],"sources":["../../../src/lib/replacer.ts"],"sourcesContent":["import { escapeRegExp } from '../regexp';\n\nexport class Replacer {\n  private regexp: RegExp | undefined;\n  private map: Record<string, string>;\n\n  constructor(map: Record<string, string>) {\n    this.map = map;\n  }\n\n  private build() {\n    if (this.regexp) {\n      return;\n    }\n\n    const groups = Object.keys(this.map)\n      .map(escapeRegExp)\n      .sort((a, b) => b.length - a.length);\n    const pattern = `(?:${groups.join('|')})`;\n\n    this.regexp = new RegExp(pattern, 'g');\n  }\n\n  replace(string: string) {\n    if (!string) {\n      return '';\n    }\n\n    this.build();\n\n    return string.replace(this.regexp!, (substring) => this.map[substring]);\n  }\n}\n"],"mappings":";;;AAAA,SAASA,YAAY,QAAQ;AAE7B,OAAO,IAAAC,QAAM,gBAAN;;;WAAMA,SAICC,GAA2B;4BAJ5BD,QAAA;IACXE,gBAAA,OAAQ,UAAR;IACAA,gBAAA,OAAQ,OAAR;IAGE,IAAI,CAACD,GAAG,GAAGA,GAAA;;gBALFD,QAAA,G;IAQHG,GAAA;WAAR,SAAQC,MAAA;MACN,IAAI,IAAI,CAACC,MAAM,EAAE;QACf;MACF;MAEA,IAAMC,MAAA,GAASC,MAAA,CAAOC,IAAI,CAAC,IAAI,CAACP,GAAG,EAChCA,GAAG,CAACF,YAAA,EACJU,IAAI,CAAC,UAACC,CAAA,EAAGC,CAAA;eAAMA,CAAA,CAAEC,MAAM,GAAGF,CAAA,CAAEE,MAAM;;MACrC,IAAMC,OAAA,GAAU,KAAC,CAAsBC,MAAA,CAAjBR,MAAA,CAAOS,IAAI,CAAC,MAAK;MAEvC,IAAI,CAACV,MAAM,GAAG,IAAIW,MAAA,CAAOH,OAAA,EAAS;IACpC;;IAEAV,GAAA;WAAA,SAAAc,QAAQC,MAAc;;MACpB,IAAI,CAACA,MAAA,EAAQ;QACX,OAAO;MACT;MAEA,IAAI,CAACd,KAAK;MAEV,OAAOc,MAAA,CAAOD,OAAO,CAAC,IAAI,CAACZ,MAAM,EAAG,UAACc,SAAA;eAAcC,KAAA,CAAKnB,GAAG,CAACkB,SAAA,CAAU;;IACxE;;SA7BWnB,QAAA"},"metadata":{},"sourceType":"module"}