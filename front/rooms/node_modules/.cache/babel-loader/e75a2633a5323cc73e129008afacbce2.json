{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window) {\n  var\n    // eslint-disable-next-line compat/compat\n    _window_screen_orientation, _window_screen;\n  if (!window) {\n    return \"portrait\";\n  }\n  var _window_screen_orientation_angle;\n  var angle = Math.abs((_window_screen_orientation_angle = (_window_screen = window.screen) === null || _window_screen === void 0 ? void 0 : (_window_screen_orientation = _window_screen.orientation) === null || _window_screen_orientation === void 0 ? void 0 : _window_screen_orientation.angle) !== null && _window_screen_orientation_angle !== void 0 ? _window_screen_orientation_angle : Number(window.orientation));\n  return angle === 90 ? \"landscape\" : \"portrait\";\n}\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange() {\n  var window = useDOM().window;\n  var _React_useState = _sliced_to_array(React.useState(function () {\n      return getOrientation(window);\n    }), 2),\n    orientation = _React_useState[0],\n    setOrientation = _React_useState[1];\n  useGlobalEventListener(window, \"orientationchange\", function () {\n    return setOrientation(getOrientation(window));\n  });\n  return orientation;\n}","map":{"version":3,"names":["React","useDOM","useGlobalEventListener","getOrientation","window","_window_screen_orientation","_window_screen","_window_screen_orientation_angle","angle","Math","abs","screen","orientation","Number","useOrientationChange","_React_useState","_sliced_to_array","useState","setOrientation"],"sources":["../../src/hooks/useOrientationChange.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ntype Orientation = 'portrait' | 'landscape';\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window: Window | undefined): Orientation {\n  if (!window) {\n    return 'portrait';\n  }\n\n  const angle = Math.abs(\n    // eslint-disable-next-line compat/compat\n    window.screen?.orientation?.angle ?? Number(window.orientation),\n  );\n\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange(): Orientation {\n  const { window } = useDOM();\n\n  const [orientation, setOrientation] = React.useState(() => getOrientation(window));\n\n  useGlobalEventListener(window, 'orientationchange', () => setOrientation(getOrientation(window)));\n\n  return orientation;\n}\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,MAAM,QAAQ;AACvB,SAASC,sBAAsB,QAAQ;AAIvC;;;;AAIA,SAASC,eAAeC,MAA0B;;IAM9C;IACAC,0BAAA,EAAAC,cAAA;EANF,IAAI,CAACF,MAAA,EAAQ;IACX,OAAO;EACT;MAIEG,gCAAA;EAFF,IAAMC,KAAA,GAAQC,IAAA,CAAKC,GAAG,CAEpB,CAAAH,gCAAA,IAAAD,cAAA,GAAAF,MAAA,CAAOO,MAAM,cAAbL,cAAA,wBAAAD,0BAAA,GAAAC,cAAA,CAAeM,WAAW,cAA1BP,0BAAA,uBAAAA,0BAAA,CAA4BG,KAAK,cAAjCD,gCAAA,cAAAA,gCAAA,GAAqCM,MAAA,CAAOT,MAAA,CAAOQ,WAAW;EAGhE,OAAOJ,KAAA,KAAU,KAAK,cAAc;AACtC;AAEA;;;;AAIA,OAAO,SAASM,qBAAA;EACd,IAAMV,MAAE,GAAWH,MAAA,GAAXG,MAAA;EAER,IAAsCW,eAAA,GAAAC,gBAAA,CAAAhB,KAAA,CAAMiB,QAAQ,CAAC;aAAMd,cAAA,CAAeC,MAAA;;IAAnEQ,WAAA,GAA+BG,eAAA;IAAlBG,cAAA,GAAkBH,eAAA;EAEtCb,sBAAA,CAAuBE,MAAA,EAAQ,qBAAqB;WAAMc,cAAA,CAAef,cAAA,CAAeC,MAAA;;EAExF,OAAOQ,WAAA;AACT"},"metadata":{},"sourceType":"module"}