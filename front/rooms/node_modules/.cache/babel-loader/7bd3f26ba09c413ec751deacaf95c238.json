{"ast":null,"code":"import { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport * as React from \"react\";\nimport { clamp } from \"../helpers/math\";\nimport { rangeIncrement } from \"../helpers/range\";\n/**\n * Хук позаимствован у @mui с некоторыми изменениями.\n *  [usePagination.js](https://github.com/mui/material-ui/blob/master/packages/mui-material/src/usePagination/usePagination.js).\n *\n * Примеры вывода:\n *           v\n * [1, 2, 3, 4, 5, 'end-ellipsis', 10]\n *                          v\n * [1, 'start-ellipsis', 4, 5, 6, 'end-ellipsis', 10]\n *                          v\n * [1, 'start-ellipsis', 6, 7, 8, 9, 10]\n */\nexport var usePagination = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},\n    _ref_currentPage = _ref.currentPage,\n    currentPage = _ref_currentPage === void 0 ? 1 : _ref_currentPage,\n    _ref_siblingCount = _ref.siblingCount,\n    siblingCount = _ref_siblingCount === void 0 ? 1 : _ref_siblingCount,\n    _ref_boundaryCount = _ref.boundaryCount,\n    boundaryCount = _ref_boundaryCount === void 0 ? 1 : _ref_boundaryCount,\n    tmp = _ref.totalPages,\n    endPage = tmp === void 0 ? 1 : tmp;\n  return React.useMemo(function () {\n    var _pages, _pages1;\n    var startPages = rangeIncrement(1, Math.min(boundaryCount, endPage));\n    var endPages = rangeIncrement(Math.max(endPage - boundaryCount + 1, boundaryCount + 1), endPage);\n    var lowerBoundaryWhenCurrentPageHigh = endPage - boundaryCount - 1 - 2 * siblingCount;\n    var siblingsStart = clamp(currentPage - siblingCount, boundaryCount + 2, lowerBoundaryWhenCurrentPageHigh);\n    var upperBoundaryWhenCurrentPageLow = boundaryCount + 2 + 2 * siblingCount;\n    var siblingsEnd = Math.min(Math.max(currentPage + siblingCount, upperBoundaryWhenCurrentPageLow), endPages.length > 0 ? endPages[0] - 2 : endPage - 1);\n    var pages = startPages;\n    if (siblingsStart > boundaryCount + 2) {\n      pages.push(\"start-ellipsis\");\n    } else if (boundaryCount + 1 < endPage - boundaryCount) {\n      pages.push(boundaryCount + 1);\n    }\n    (_pages = pages).push.apply(_pages, _to_consumable_array(rangeIncrement(siblingsStart, siblingsEnd)));\n    if (siblingsEnd < endPage - boundaryCount - 1) {\n      pages.push(\"end-ellipsis\");\n    } else if (endPage - boundaryCount > boundaryCount) {\n      pages.push(endPage - boundaryCount);\n    }\n    (_pages1 = pages).push.apply(_pages1, _to_consumable_array(endPages));\n    return pages;\n  }, [currentPage, endPage, siblingCount, boundaryCount]);\n};","map":{"version":3,"names":["React","clamp","rangeIncrement","usePagination","_ref_currentPage","_ref","currentPage","_ref_siblingCount","siblingCount","_ref_boundaryCount","boundaryCount","tmp","totalPages","endPage","useMemo","_pages","_pages1","startPages","Math","min","endPages","max","lowerBoundaryWhenCurrentPageHigh","siblingsStart","upperBoundaryWhenCurrentPageLow","siblingsEnd","length","pages","push","apply","_to_consumable_array"],"sources":["../../src/hooks/usePagination.ts"],"sourcesContent":["import * as React from 'react';\nimport { clamp } from '../helpers/math';\nimport { rangeIncrement } from '../helpers/range';\n\ninterface UsePaginationProps {\n  /**\n   * Текущая страница.\n   */\n  currentPage?: number;\n  /**\n   * Кол-во всегда видимых страниц по краям текущей страницы.\n   */\n  siblingCount?: number;\n  /**\n   * Кол-во всегда видимых страниц в начале и в конце.\n   */\n  boundaryCount?: number;\n  /**\n   * Общее кол-во страниц.\n   */\n  totalPages?: number;\n}\n\nexport type PaginationPageType = 'start-ellipsis' | 'end-ellipsis' | number;\n\nexport type UsePaginationResult = PaginationPageType[];\n\n/**\n * Хук позаимствован у @mui с некоторыми изменениями.\n *  [usePagination.js](https://github.com/mui/material-ui/blob/master/packages/mui-material/src/usePagination/usePagination.js).\n *\n * Примеры вывода:\n *           v\n * [1, 2, 3, 4, 5, 'end-ellipsis', 10]\n *                          v\n * [1, 'start-ellipsis', 4, 5, 6, 'end-ellipsis', 10]\n *                          v\n * [1, 'start-ellipsis', 6, 7, 8, 9, 10]\n */\nexport const usePagination = ({\n  currentPage = 1,\n  siblingCount = 1,\n  boundaryCount = 1,\n  totalPages: endPage = 1,\n}: UsePaginationProps = {}): UsePaginationResult =>\n  React.useMemo(() => {\n    const startPages = rangeIncrement(1, Math.min(boundaryCount, endPage));\n    const endPages = rangeIncrement(\n      Math.max(endPage - boundaryCount + 1, boundaryCount + 1),\n      endPage,\n    );\n\n    const lowerBoundaryWhenCurrentPageHigh = endPage - boundaryCount - 1 - 2 * siblingCount;\n    const siblingsStart = clamp(\n      currentPage - siblingCount,\n      boundaryCount + 2,\n      lowerBoundaryWhenCurrentPageHigh,\n    );\n\n    const upperBoundaryWhenCurrentPageLow = boundaryCount + 2 + 2 * siblingCount;\n    const siblingsEnd = Math.min(\n      Math.max(currentPage + siblingCount, upperBoundaryWhenCurrentPageLow),\n      endPages.length > 0 ? endPages[0] - 2 : endPage - 1,\n    );\n\n    const pages: UsePaginationResult = startPages;\n\n    if (siblingsStart > boundaryCount + 2) {\n      pages.push('start-ellipsis');\n    } else if (boundaryCount + 1 < endPage - boundaryCount) {\n      pages.push(boundaryCount + 1);\n    }\n\n    pages.push(...rangeIncrement(siblingsStart, siblingsEnd));\n\n    if (siblingsEnd < endPage - boundaryCount - 1) {\n      pages.push('end-ellipsis');\n    } else if (endPage - boundaryCount > boundaryCount) {\n      pages.push(endPage - boundaryCount);\n    }\n\n    pages.push(...endPages);\n\n    return pages;\n  }, [currentPage, endPage, siblingCount, boundaryCount]);\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,KAAK,QAAQ;AACtB,SAASC,cAAc,QAAQ;AAyB/B;;;;;;;;;;;;AAYA,OAAO,IAAMC,aAAA,GAAgB,SAAAA,CAAA;8EAKL,CAAC;IAAAC,gBAAA,GAAAC,IAAA,CAJvBC,WAAA;IAAAA,WAAA,GAAAF,gBAAA,cAAc,IAAAA,gBAAA;IAAAG,iBAAA,GAAAF,IAAA,CACdG,YAAA;IAAAA,YAAA,GAAAD,iBAAA,cAAe,IAAAA,iBAAA;IAAAE,kBAAA,GAAAJ,IAAA,CACfK,aAAA;IAAAA,aAAA,GAAAD,kBAAA,cAAgB,IAAAA,kBAAA;IACJE,GAAA,GAAAN,IAAA,CAAZO,UAAA;IAAYC,OAAA,GAAAF,GAAA,cAAU,IAAVA,GAAA;SAEZX,KAAA,CAAMc,OAAO,CAAC;QA4BZC,MAAA,EAQAC,OAAA;IAnCA,IAAMC,UAAA,GAAaf,cAAA,CAAe,GAAGgB,IAAA,CAAKC,GAAG,CAACT,aAAA,EAAeG,OAAA;IAC7D,IAAMO,QAAA,GAAWlB,cAAA,CACfgB,IAAA,CAAKG,GAAG,CAACR,OAAA,GAAUH,aAAA,GAAgB,GAAGA,aAAA,GAAgB,IACtDG,OAAA;IAGF,IAAMS,gCAAA,GAAmCT,OAAA,GAAUH,aAAA,GAAgB,IAAI,IAAIF,YAAA;IAC3E,IAAMe,aAAA,GAAgBtB,KAAA,CACpBK,WAAA,GAAcE,YAAA,EACdE,aAAA,GAAgB,GAChBY,gCAAA;IAGF,IAAME,+BAAA,GAAkCd,aAAA,GAAgB,IAAI,IAAIF,YAAA;IAChE,IAAMiB,WAAA,GAAcP,IAAA,CAAKC,GAAG,CAC1BD,IAAA,CAAKG,GAAG,CAACf,WAAA,GAAcE,YAAA,EAAcgB,+BAAA,GACrCJ,QAAA,CAASM,MAAM,GAAG,IAAIN,QAAQ,CAAC,EAAE,GAAG,IAAIP,OAAA,GAAU;IAGpD,IAAMc,KAAA,GAA6BV,UAAA;IAEnC,IAAIM,aAAA,GAAgBb,aAAA,GAAgB,GAAG;MACrCiB,KAAA,CAAMC,IAAI,CAAC;IACb,OAAO,IAAIlB,aAAA,GAAgB,IAAIG,OAAA,GAAUH,aAAA,EAAe;MACtDiB,KAAA,CAAMC,IAAI,CAAClB,aAAA,GAAgB;IAC7B;IAEA,CAAAK,MAAA,GAAAY,KAAA,EAAMC,IAAI,CAAVC,KAAA,CAAAd,MAAA,EAAWe,oBAAA,CAAG5B,cAAA,CAAeqB,aAAA,EAAeE,WAAA;IAE5C,IAAIA,WAAA,GAAcZ,OAAA,GAAUH,aAAA,GAAgB,GAAG;MAC7CiB,KAAA,CAAMC,IAAI,CAAC;IACb,OAAO,IAAIf,OAAA,GAAUH,aAAA,GAAgBA,aAAA,EAAe;MAClDiB,KAAA,CAAMC,IAAI,CAACf,OAAA,GAAUH,aAAA;IACvB;IAEA,CAAAM,OAAA,GAAAW,KAAA,EAAMC,IAAI,CAAVC,KAAA,CAAAb,OAAA,EAAWc,oBAAA,CAAGV,QAAA;IAEd,OAAOO,KAAA;EACT,GAAG,CAACrB,WAAA,EAAaO,OAAA,EAASL,YAAA,EAAcE,aAAA,CAAc"},"metadata":{},"sourceType":"module"}