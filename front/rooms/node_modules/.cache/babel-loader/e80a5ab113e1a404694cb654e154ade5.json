{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames, noop } from \"@vkontakte/vkjs\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { Platform } from \"../../lib/platform\";\nimport { ListContext } from \"../List/ListContext\";\nimport { Removable } from \"../Removable/Removable\";\nimport { SimpleCell } from \"../SimpleCell/SimpleCell\";\nimport { CellCheckbox } from \"./CellCheckbox/CellCheckbox\";\nimport { CellDragger } from \"./CellDragger/CellDragger\";\nimport { useDraggable } from \"./useDraggable\";\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport var Cell = function (_param) {\n  var mode = _param.mode,\n    _param_onRemove = _param.onRemove,\n    onRemove = _param_onRemove === void 0 ? noop : _param_onRemove,\n    _param_removePlaceholder = _param.removePlaceholder,\n    removePlaceholder = _param_removePlaceholder === void 0 ? \"Удалить\" : _param_removePlaceholder,\n    onDragFinish = _param.onDragFinish,\n    before = _param.before,\n    after = _param.after,\n    disabled = _param.disabled,\n    draggable = _param.draggable,\n    ComponentProps = _param.Component,\n    onChange = _param.onChange,\n    name = _param.name,\n    value = _param.value,\n    checked = _param.checked,\n    defaultChecked = _param.defaultChecked,\n    getRootRef = _param.getRootRef,\n    _param_draggerLabel = _param.draggerLabel,\n    draggerLabel = _param_draggerLabel === void 0 ? \"Перенести ячейку\" : _param_draggerLabel,\n    className = _param.className,\n    style = _param.style,\n    restProps = _object_without_properties(_param, [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"draggable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\"]);\n  var selectable = mode === \"selectable\";\n  var removable = mode === \"removable\";\n  var Component = selectable ? \"label\" : ComponentProps;\n  var platform = usePlatform();\n  var rootElRef = useExternRef(getRootRef);\n  var _useDraggable = useDraggable({\n      rootElRef: rootElRef,\n      onDragFinish: onDragFinish\n    }),\n    dragging = _useDraggable.dragging,\n    draggableProps = _object_without_properties(_useDraggable, [\"dragging\"]);\n  var toggleDrag = React.useContext(ListContext).toggleDrag;\n  React.useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n  var dragger;\n  if (draggable) {\n    dragger = /*#__PURE__*/React.createElement(CellDragger, _object_spread({\n      className: \"vkuiCell__dragger\",\n      \"aria-label\": draggerLabel\n    }, draggableProps));\n  }\n  var checkbox;\n  if (selectable) {\n    var checkboxProps = {\n      name: name,\n      value: value,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    };\n    checkbox = /*#__PURE__*/React.createElement(CellCheckbox, _object_spread({\n      className: \"vkuiCell__checkbox\"\n    }, checkboxProps));\n  }\n  var simpleCellDisabled = draggable && !selectable || removable && !restProps.onClick || disabled;\n  var hasActive = !simpleCellDisabled && !dragging;\n  var cellClasses = classNames(\"vkuiCell\", platform === Platform.IOS && \"vkuiCell--ios\", dragging && \"vkuiCell--dragging\", removable && \"vkuiCell--removable\", Component === \"label\" && \"vkuiCell--selectable\", disabled && \"vkuiCell--disabled\");\n  var simpleCellProps = _object_spread_props(_object_spread({\n    hasActive: hasActive,\n    hasHover: hasActive && !removable\n  }, restProps), {\n    className: \"vkuiCell__content\",\n    disabled: simpleCellDisabled,\n    Component: Component,\n    before: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform !== Platform.IOS && dragger, selectable && checkbox, before),\n    after: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform === Platform.IOS && dragger, after)\n  });\n  if (removable) {\n    return /*#__PURE__*/React.createElement(Removable, {\n      className: classNames(cellClasses, className),\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: function (e) {\n        return onRemove(e, rootElRef.current);\n      }\n    }, platform === Platform.IOS ? function (param) {\n      var isRemoving = param.isRemoving;\n      return /*#__PURE__*/React.createElement(SimpleCell, _object_spread_props(_object_spread({}, simpleCellProps), {\n        disabled: simpleCellProps.disabled || isRemoving\n      }));\n    } : /*#__PURE__*/React.createElement(SimpleCell, simpleCellProps));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(cellClasses, className),\n    style: style,\n    ref: rootElRef\n  }, /*#__PURE__*/React.createElement(SimpleCell, simpleCellProps));\n};\nCell.Checkbox = CellCheckbox;","map":{"version":3,"names":["React","classNames","noop","useExternRef","usePlatform","Platform","ListContext","Removable","SimpleCell","CellCheckbox","CellDragger","useDraggable","Cell","_param","mode","_param_onRemove","onRemove","_param_removePlaceholder","removePlaceholder","onDragFinish","before","after","disabled","draggable","ComponentProps","Component","onChange","name","value","checked","defaultChecked","getRootRef","_param_draggerLabel","draggerLabel","className","style","restProps","_object_without_properties","selectable","removable","platform","rootElRef","_useDraggable","dragging","draggableProps","toggleDrag","useContext","useEffect","undefined","dragger","createElement","_object_spread","checkbox","checkboxProps","simpleCellDisabled","onClick","hasActive","cellClasses","IOS","simpleCellProps","_object_spread_props","hasHover","Fragment","e","current","param","isRemoving","ref","Checkbox"],"sources":["../../../src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { Platform } from '../../lib/platform';\nimport { HasRootRef } from '../../types';\nimport { ListContext } from '../List/ListContext';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { useDraggable } from './useDraggable';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = 'Перенести ячейку',\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const { dragging, ...draggableProps } = useDraggable({\n    rootElRef,\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        className={styles['Cell__dragger']}\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || (removable && !restProps.onClick) || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    platform === Platform.IOS && styles['Cell--ios'],\n    dragging && styles['Cell--dragging'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    ...restProps,\n    className: styles['Cell__content'],\n    disabled: simpleCellDisabled,\n    Component: Component,\n    before: (\n      <React.Fragment>\n        {draggable && platform !== Platform.IOS && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === Platform.IOS && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n      >\n        {platform === Platform.IOS ? (\n          ({ isRemoving }) => (\n            <SimpleCell {...simpleCellProps} disabled={simpleCellProps.disabled || isRemoving} />\n          )\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"mappings":";;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,UAAU,EAAEC,IAAI,QAAQ;AACjC,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAC5B,SAASC,QAAQ,QAAQ;AAEzB,SAASC,WAAW,QAAQ;AAC5B,SAASC,SAAS,QAAwB;AAC1C,SAASC,UAAU,QAAyB;AAC5C,SAASC,YAAY,QAA2B;AAChD,SAASC,WAAW,QAAQ;AAC5B,SAASC,YAAY,QAAQ;AAqC7B;;;AAGA,OAAO,IAAMC,IAAA,GAAO,SAAAA,CAAAC,MAAA;MAClBC,IAAA,GAAAD,MAAA,CAAAC,IAAA;IAAAC,eAAA,GAAAF,MAAA,CACAG,QAAA;IAAAA,QAAA,GAAAD,eAAA,cAAWb,IAAA,GAAAa,eAAA;IAAAE,wBAAA,GAAAJ,MAAA,CACXK,iBAAA;IAAAA,iBAAA,GAAAD,wBAAA,cAAoB,YAAAA,wBAAA;IACpBE,YAAA,GAAAN,MAAA,CAAAM,YAAA;IACAC,MAAA,GAAAP,MAAA,CAAAO,MAAA;IACAC,KAAA,GAAAR,MAAA,CAAAQ,KAAA;IACAC,QAAA,GAAAT,MAAA,CAAAS,QAAA;IACAC,SAAA,GAAAV,MAAA,CAAAU,SAAA;IACAC,cAAW,GAAAX,MAAA,CAAXY,SAAA;IACAC,QAAA,GAAAb,MAAA,CAAAa,QAAA;IACAC,IAAA,GAAAd,MAAA,CAAAc,IAAA;IACAC,KAAA,GAAAf,MAAA,CAAAe,KAAA;IACAC,OAAA,GAAAhB,MAAA,CAAAgB,OAAA;IACAC,cAAA,GAAAjB,MAAA,CAAAiB,cAAA;IACAC,UAAA,GAAAlB,MAAA,CAAAkB,UAAA;IAAAC,mBAAA,GAAAnB,MAAA,CACAoB,YAAA;IAAAA,YAAA,GAAAD,mBAAA,cAAe,qBAAAA,mBAAA;IACfE,SAAA,GAAArB,MAAA,CAAAqB,SAAA;IACAC,KAAA,GAAAtB,MAAA,CAAAsB,KAAA;IACGC,SAAA,GAAAC,0BAAA,CAAAxB,MAAA,GAlBH,QACA,YACA,qBACA,gBACA,UACA,SACA,YACA,aACA,aACA,YACA,QACA,SACA,WACA,kBACA,cACA,gBACA,aACA,Q;EAGA,IAAMyB,UAAA,GAAaxB,IAAA,KAAS;EAC5B,IAAMyB,SAAA,GAAYzB,IAAA,KAAS;EAC3B,IAAMW,SAAA,GAAYa,UAAA,GAAa,UAAUd,cAAA;EAEzC,IAAMgB,QAAA,GAAWpC,WAAA;EAEjB,IAAMqC,SAAA,GAAYtC,YAAA,CAAa4B,UAAA;EAE/B,IAAwCW,aAAA,GAAA/B,YAAA,CAAa;MACnD8B,SAAA,EAAAA,SAAA;MACAtB,YAAA,EAAAA;IACF;IAHMwB,QAAE,GAAgCD,aAAA,CAAhCC,QAAA;IAAaC,cAAA,GAAAP,0BAAA,CAAmBK,aAAA,GAAhC,W;EAKR,IAAMG,UAAE,GAAe7C,KAAA,CAAM8C,UAAU,CAACxC,WAAA,EAAhCuC,UAAA;EACR7C,KAAA,CAAM+C,SAAS,CAAC;IACd,IAAIJ,QAAA,EAAU;MACZE,UAAA,CAAW;MACX,OAAO;eAAMA,UAAA,CAAW;;IAC1B;IACA,OAAOG,SAAA;EACT,GAAG,CAACL,QAAA,EAAUE,UAAA,CAAW;EAEzB,IAAII,OAAA;EACJ,IAAI1B,SAAA,EAAW;IACb0B,OAAA,gBACEjD,KAAA,CAAAkD,aAAA,CAACxC,WAAA,EAAAyC,cAAA;MACCjB,SAAS;MACT,cAAYD;OACRW,cAAA;EAGV;EAEA,IAAIQ,QAAA;EACJ,IAAId,UAAA,EAAY;IACd,IAAMe,aAAA,GAAmC;MACvC1B,IAAA,EAAAA,IAAA;MACAC,KAAA,EAAAA,KAAA;MACAF,QAAA,EAAAA,QAAA;MACAI,cAAA,EAAAA,cAAA;MACAD,OAAA,EAAAA,OAAA;MACAP,QAAA,EAAAA;IACF;IACA8B,QAAA,gBAAWpD,KAAA,CAAAkD,aAAA,CAACzC,YAAA,EAAA0C,cAAA;MAAajB,SAAS;OAAgCmB,aAAA;EACpE;EAEA,IAAMC,kBAAA,GACJ/B,SAAC,IAAa,CAACe,UAAA,IAAgBC,SAAA,IAAa,CAACH,SAAA,CAAUmB,OAAO,IAAKjC,QAAA;EACrE,IAAMkC,SAAA,GAAY,CAACF,kBAAA,IAAsB,CAACX,QAAA;EAE1C,IAAMc,WAAA,GAAcxD,UAAA,aAElBuC,QAAA,KAAanC,QAAA,CAASqD,GAAG,qBACzBf,QAAA,0BACAJ,SAAA,2BACAd,SAAA,KAAc,mCACdH,QAAA;EAGF,IAAMqC,eAAA,GAAkBC,oBAAA,CAAAT,cAAA;IACtBK,SAAA,EAAWA,SAAA;IACXK,QAAA,EAAUL,SAAA,IAAa,CAACjB;KACrBH,SAAA;IACHF,SAAS;IACTZ,QAAA,EAAUgC,kBAAA;IACV7B,SAAA,EAAWA,SAAA;IACXL,MAAA,eACEpB,KAAA,CAAAkD,aAAA,CAAClD,KAAA,CAAM8D,QAAQ,QACZvC,SAAA,IAAaiB,QAAA,KAAanC,QAAA,CAASqD,GAAG,IAAIT,OAAA,EAC1CX,UAAA,IAAcc,QAAA,EACdhC,MAAA;IAGLC,KAAA,eACErB,KAAA,CAAAkD,aAAA,CAAClD,KAAA,CAAM8D,QAAQ,QACZvC,SAAA,IAAaiB,QAAA,KAAanC,QAAA,CAASqD,GAAG,IAAIT,OAAA,EAC1C5B,KAAA;;EAKP,IAAIkB,SAAA,EAAW;IACb,oBACEvC,KAAA,CAAAkD,aAAA,CAAC3C,SAAA;MACC2B,SAAA,EAAWjC,UAAA,CAAWwD,WAAA,EAAavB,SAAA;MACnCC,KAAA,EAAOA,KAAA;MACPJ,UAAA,EAAYU,SAAA;MACZvB,iBAAA,EAAmBA,iBAAA;MACnBF,QAAA,EAAU,SAAAA,CAAC+C,CAAA;eAAM/C,QAAA,CAAS+C,CAAA,EAAGtB,SAAA,CAAUuB,OAAO;;OAE7CxB,QAAA,KAAanC,QAAA,CAASqD,GAAG,GACxB,UAAAO,KAAA;UAAGC,UAAA,GAAAD,KAAA,CAAAC,UAAA;0BACDlE,KAAA,CAAAkD,aAAA,CAAC1C,UAAA,EAAAoD,oBAAA,CAAAT,cAAA,KAAeQ,eAAA;QAAiBrC,QAAA,EAAUqC,eAAA,CAAgBrC,QAAQ,IAAI4C;;qBAGzElE,KAAA,CAAAkD,aAAA,CAAC1C,UAAA,EAAemD,eAAA;EAIxB;EAEA,oBACE3D,KAAA,CAAAkD,aAAA,CAAC;IAAIhB,SAAA,EAAWjC,UAAA,CAAWwD,WAAA,EAAavB,SAAA;IAAYC,KAAA,EAAOA,KAAA;IAAOgC,GAAA,EAAK1B;kBACrEzC,KAAA,CAAAkD,aAAA,CAAC1C,UAAA,EAAemD,eAAA;AAGtB;AAEA/C,IAAA,CAAKwD,QAAQ,GAAG3D,YAAA"},"metadata":{},"sourceType":"module"}