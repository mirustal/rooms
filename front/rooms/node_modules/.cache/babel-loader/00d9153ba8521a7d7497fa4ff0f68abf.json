{"ast":null,"code":"import { leadingZero } from \"./numbers\";\nexport var SECONDS_IN_THE_DAY = 86400;\nvar MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\nexport function isDateToday(date) {\n  var now = new Date();\n  var d = now.getDate();\n  var m = now.getMonth();\n  var y = now.getFullYear();\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\nexport function isDateYesterday(date) {\n  var yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\nexport function isDateTomorrow(date) {\n  var tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\nexport function isSameDate(d1, d2) {\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Возвращает новую дату — начало переданного дня\n */\nexport function getBeginningOfDay(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n  var day = date.getDate();\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\nexport function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\nexport function getLastDayOfMonth(year, month) {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && (month < 8 && month % 2 === 0 || month > 7 && month % 2 === 1)) {\n    return 30;\n  }\n  return 31;\n}\n/**\n * Ближайший понедельник в прошлом относительно date\n */\nexport function getStartOfWeek(date) {\n  var weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\nexport function addDays(date, dayCount) {\n  var modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n/**\n * Создаёт дату из Unix Timestamp\n */\nexport function createDateFromUnixTimestamp(timestamp) {\n  return new Date(timestamp * 1000);\n}\n/**\n * Возвращает Unix Timestamp из даты\n */\nexport function getUnixTimestampFromDate(date) {\n  return Math.floor(date.getTime() / 1000);\n}\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\nexport function convertDateToInputFormat(date) {\n  var day = date.getDate();\n  var month = date.getMonth() + 1;\n  var year = date.getFullYear();\n  return [year, leadingZero(month), leadingZero(day)].join(\"-\");\n}","map":{"version":3,"names":["leadingZero","SECONDS_IN_THE_DAY","MILLISECONDS_IN_THE_DAY","isDateToday","date","now","Date","d","getDate","m","getMonth","y","getFullYear","isDateYesterday","yesterdayDate","getTime","isDateTomorrow","tomorrowDate","isSameDate","d1","d2","getBeginningOfDay","year","month","day","isLeapYear","getLastDayOfMonth","getStartOfWeek","weekDay","getDay","addDays","dayCount","modified","setDate","createDateFromUnixTimestamp","timestamp","getUnixTimestampFromDate","Math","floor","convertDateToInputFormat","join"],"sources":["../../src/date.ts"],"sourcesContent":["import { leadingZero } from './numbers';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\nexport function isDateToday(date: Date): boolean {\n  const now = new Date();\n  const d = now.getDate();\n  const m = now.getMonth();\n  const y = now.getFullYear();\n\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\nexport function isSameDate(d1: Date, d2: Date): boolean {\n  return (\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\nexport function isLeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}