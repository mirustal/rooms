{"ast":null,"code":"/**\n * Returns true if value is a number (excluding NaN), or is a numeric string.\n *\n * NOTE: It treats all Number-coercible strings as numeric (e.g. `'0x123'`, `'123e-1'`),\n * so for number-type values it's better to just use `Number.isFinite()`.\n */export function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value) &&\n  // Handle `[1]` being serialized and parsed as `1`\n  !Array.isArray(value);\n}","map":{"version":3,"names":["isNumeric","value","isNaN","parseFloat","isFinite","Array","isArray"],"sources":["../../src/common.ts"],"sourcesContent":["/**\n * Returns true if value is a number (excluding NaN), or is a numeric string.\n *\n * NOTE: It treats all Number-coercible strings as numeric (e.g. `'0x123'`, `'123e-1'`),\n * so for number-type values it's better to just use `Number.isFinite()`.\n */\nexport function isNumeric(value: any): boolean {\n  return (\n    !isNaN(parseFloat(value)) &&\n    isFinite(value) &&\n    // Handle `[1]` being serialized and parsed as `1`\n    !Array.isArray(value)\n  );\n}\n"],"mappings":"AAAA;;;;;GAMA,OAAO,SAASA,UAAUC,KAAU;EAClC,OACE,CAACC,KAAA,CAAMC,UAAA,CAAWF,KAAA,MAClBG,QAAA,CAASH,KAAA;EACT;EACA,CAACI,KAAA,CAAMC,OAAO,CAACL,KAAA;AAEnB"},"metadata":{},"sourceType":"module"}