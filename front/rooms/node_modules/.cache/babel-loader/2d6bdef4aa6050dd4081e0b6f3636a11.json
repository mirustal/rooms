{"ast":null,"code":"import { addDays, addWeeks, eachDayOfInterval, endOfMonth, endOfWeek, isBefore, isFirstDayOfMonth, isLastDayOfMonth, startOfMonth, startOfWeek, subDays, subWeeks } from \"./date\";\nexport var getYears = function (currentYear, range) {\n  var years = [];\n  for (var i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({\n      label: String(i).padStart(4, \"0\"),\n      value: i\n    });\n  }\n  return years;\n};\nexport var getMonths = function (locale) {\n  var months = [];\n  var formatter = new Intl.DateTimeFormat(locale, {\n    month: \"long\"\n  });\n  for (var i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date(\"1970-01-01\").setMonth(i)),\n      value: i\n    });\n  }\n  return months;\n};\nexport var getDaysNames = function (now, weekStartsOn, locale) {\n  var formatter = new Intl.DateTimeFormat(locale, {\n    weekday: \"short\"\n  });\n  return eachDayOfInterval(startOfWeek(now, weekStartsOn), endOfWeek(now, weekStartsOn)).map(function (day) {\n    return formatter.format(day);\n  });\n};\nexport var navigateDate = function (date, key) {\n  var newDate = date !== null && date !== void 0 ? date : new Date();\n  switch (key) {\n    case \"ArrowRight\":\n      newDate = addDays(newDate, 1);\n      break;\n    case \"ArrowLeft\":\n      newDate = subDays(newDate, 1);\n      break;\n    case \"ArrowUp\":\n      newDate = subWeeks(newDate, 1);\n      break;\n    case \"ArrowDown\":\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n  return newDate;\n};\nexport var getWeeks = function (viewDate, weekStartsOn) {\n  var start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  var end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n  var count = 0;\n  var current = start;\n  var nestedWeeks = [];\n  var lastDay = null;\n  while (isBefore(current, end)) {\n    var weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    var day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\nexport var setTimeEqual = function (to, from) {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n  return to;\n};\nexport var isFirstDay = function (day, dayOfWeek) {\n  return dayOfWeek === 0 || isFirstDayOfMonth(day);\n};\nexport var isLastDay = function (day, dayOfWeek) {\n  return dayOfWeek === 6 || isLastDayOfMonth(day);\n};","map":{"version":3,"names":["addDays","addWeeks","eachDayOfInterval","endOfMonth","endOfWeek","isBefore","isFirstDayOfMonth","isLastDayOfMonth","startOfMonth","startOfWeek","subDays","subWeeks","getYears","currentYear","range","years","i","push","label","String","padStart","value","getMonths","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","getDaysNames","now","weekStartsOn","weekday","map","day","navigateDate","date","key","newDate","getWeeks","viewDate","start","end","count","current","nestedWeeks","lastDay","weekNumber","Math","floor","getDay","setTimeEqual","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","isFirstDay","dayOfWeek","isLastDay"],"sources":["../../src/lib/calendar.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subWeeks,\n} from './date';\n\nexport const getYears = (currentYear: number, range: number) => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  for (let i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({ label: String(i).padStart(4, '0'), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (locale?: string) => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string,\n) => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n  });\n  return eachDayOfInterval(startOfWeek(now, weekStartsOn), endOfWeek(now, weekStartsOn)).map(\n    (day) => formatter.format(day),\n  );\n};\n\nexport const navigateDate = (date?: Date | null, key?: string) => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (viewDate: Date, weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6) => {\n  const start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  const end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null) => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number) =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number) => dayOfWeek === 6 || isLastDayOfMonth(day);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}