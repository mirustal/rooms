{"ast":null,"code":"import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useAppearance } from \"../../hooks/useAppearance\";\nimport { useIsClient } from \"../../hooks/useIsClient\";\nimport { isRefObject } from \"../../lib/isRefObject\";\nimport { AppearanceProvider } from \"../AppearanceProvider/AppearanceProvider\";\nimport { AppRootContext } from \"./AppRootContext\";\nexport var AppRootPortal = function (param) {\n  var children = param.children,\n    className = param.className,\n    forcePortalProp = param.forcePortal,\n    tmp = param.portalRoot,\n    portalRootProp = tmp === void 0 ? null : tmp;\n  var _React_useContext = React.useContext(AppRootContext),\n    portalRoot = _React_useContext.portalRoot,\n    mode = _React_useContext.mode,\n    disablePortal = _React_useContext.disablePortal;\n  var appearance = useAppearance();\n  var isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n  var forcePortal = forcePortalProp !== null && forcePortalProp !== void 0 ? forcePortalProp : mode !== \"full\";\n  var portalContainer = getPortalContainer(portalRootProp, portalRoot);\n  var ignoreDisablePortalFlagFromContext = portalRootProp && forcePortal;\n  var shouldUsePortal = ignoreDisablePortalFlagFromContext ? true : !disablePortal && portalContainer && forcePortal;\n  return shouldUsePortal && portalContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(AppearanceProvider, {\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: className\n  }, children)), portalContainer) : /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n/**\n * Получает из кастомного пропа `partialRootProp` и `partialRoot` контекста\n * контейнер-элемент для портала.\n * `partialRootProp` может быть ref элементом.\n *\n */\nfunction getPortalContainer(portalRootProp, portalRoot) {\n  if (!portalRootProp) {\n    return portalRoot;\n  }\n  return isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\n}","map":{"version":3,"names":["React","createPortal","useAppearance","useIsClient","isRefObject","AppearanceProvider","AppRootContext","AppRootPortal","param","children","className","forcePortalProp","forcePortal","tmp","portalRoot","portalRootProp","_React_useContext","useContext","mode","disablePortal","appearance","isClient","portalContainer","getPortalContainer","ignoreDisablePortalFlagFromContext","shouldUsePortal","createElement","Fragment","current"],"sources":["../../../src/components/AppRoot/AppRootPortal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { useAppearance } from '../../hooks/useAppearance';\nimport { useIsClient } from '../../hooks/useIsClient';\nimport { isRefObject } from '../../lib/isRefObject';\nimport { HasChildren } from '../../types';\nimport { AppearanceProvider } from '../AppearanceProvider/AppearanceProvider';\nimport { AppRootContext } from './AppRootContext';\n\nexport interface AppRootPortalProps extends HasChildren {\n  className?: string;\n  forcePortal?: boolean;\n  /**\n   * Кастомный root-элемент портала.\n   * При передаче вместе с `forcePorta=true` игнорируется `portalRoot` и `disablePortal`\n   * из контекста `AppRoot`.\n   */\n  portalRoot?: HTMLElement | React.RefObject<HTMLElement> | null;\n}\n\nexport const AppRootPortal = ({\n  children,\n  className,\n  forcePortal: forcePortalProp,\n  portalRoot: portalRootProp = null,\n}: AppRootPortalProps) => {\n  const { portalRoot, mode, disablePortal } = React.useContext(AppRootContext);\n  const appearance = useAppearance();\n\n  const isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n\n  const forcePortal = forcePortalProp ?? mode !== 'full';\n\n  const portalContainer = getPortalContainer(portalRootProp, portalRoot);\n\n  const ignoreDisablePortalFlagFromContext = portalRootProp && forcePortal;\n  const shouldUsePortal = ignoreDisablePortalFlagFromContext\n    ? true\n    : !disablePortal && portalContainer && forcePortal;\n\n  return shouldUsePortal && portalContainer ? (\n    createPortal(\n      <AppearanceProvider appearance={appearance}>\n        <div className={className}>{children}</div>\n      </AppearanceProvider>,\n      portalContainer,\n    )\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\n/**\n * Получает из кастомного пропа `partialRootProp` и `partialRoot` контекста\n * контейнер-элемент для портала.\n * `partialRootProp` может быть ref элементом.\n *\n */\nfunction getPortalContainer(\n  portalRootProp?: HTMLElement | React.RefObject<HTMLElement> | null,\n  portalRoot?: HTMLElement | null,\n) {\n  if (!portalRootProp) {\n    return portalRoot;\n  }\n\n  return isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,YAAY,QAAQ;AAC7B,SAASC,aAAa,QAAQ;AAC9B,SAASC,WAAW,QAAQ;AAC5B,SAASC,WAAW,QAAQ;AAE5B,SAASC,kBAAkB,QAAQ;AACnC,SAASC,cAAc,QAAQ;AAa/B,OAAO,IAAMC,aAAA,GAAgB,SAAAA,CAAAC,KAAA;MAC3BC,QAAA,GAAAD,KAAA,CAAAC,QAAA;IACAC,SAAA,GAAAF,KAAA,CAAAE,SAAA;IACAC,eAAa,GAAAH,KAAA,CAAbI,WAAA;IACYC,GAAA,GAAAL,KAAA,CAAZM,UAAA;IAAYC,cAAA,GAAAF,GAAA,cAAiB,OAAjBA,GAAA;EAEZ,IAA4CG,iBAAA,GAAAhB,KAAA,CAAMiB,UAAU,CAACX,cAAA;IAArDQ,UAAA,GAAoCE,iBAAA,CAApCF,UAAA;IAAYI,IAAA,GAAwBF,iBAAA,CAAxBE,IAAA;IAAMC,aAAA,GAAkBH,iBAAA,CAAlBG,aAAA;EAC1B,IAAMC,UAAA,GAAalB,aAAA;EAEnB,IAAMmB,QAAA,GAAWlB,WAAA;EACjB,IAAI,CAACkB,QAAA,EAAU;IACb,OAAO;EACT;EAEA,IAAMT,WAAA,GAAcD,eAAA,aAAAA,eAAA,cAAAA,eAAA,GAAmBO,IAAA,KAAS;EAEhD,IAAMI,eAAA,GAAkBC,kBAAA,CAAmBR,cAAA,EAAgBD,UAAA;EAE3D,IAAMU,kCAAA,GAAqCT,cAAA,IAAkBH,WAAA;EAC7D,IAAMa,eAAA,GAAkBD,kCAAA,GACpB,OACA,CAACL,aAAA,IAAiBG,eAAA,IAAmBV,WAAA;EAEzC,OAAOa,eAAA,IAAmBH,eAAA,gBACxBrB,YAAA,eACED,KAAA,CAAA0B,aAAA,CAACrB,kBAAA;IAAmBe,UAAA,EAAYA;kBAC9BpB,KAAA,CAAA0B,aAAA,CAAC;IAAIhB,SAAA,EAAWA;KAAYD,QAAA,IAE9Ba,eAAA,iBAGFtB,KAAA,CAAA0B,aAAA,CAAC1B,KAAA,CAAM2B,QAAQ,QAAElB,QAAA;AAErB;AAEA;;;;;;AAMA,SAASc,mBACPR,cAAkE,EAClED,UAA+B;EAE/B,IAAI,CAACC,cAAA,EAAgB;IACnB,OAAOD,UAAA;EACT;EAEA,OAAOV,WAAA,CAAYW,cAAA,IAAkBA,cAAA,CAAea,OAAO,GAAGb,cAAA;AAChE"},"metadata":{},"sourceType":"module"}