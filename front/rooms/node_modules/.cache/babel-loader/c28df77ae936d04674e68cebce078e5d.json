{"ast":null,"code":"import { _ as _instanceof } from \"@swc/helpers/_/_instanceof\";\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { autoUpdate as autoUpdateLib } from \"@vkontakte/vkui-floating-ui/react-dom\";\nvar defaultOptions = {\n  ancestorScroll: true,\n  ancestorResize: true,\n  // По умолчанию отключаем, т.к. навешивать `MutationObserver` может быть дорого.\n  // В `autoUpdateLib` по умолчанию опция включена. Там используется ResizeObserver, но и он не менее дорогостоящий.\n  // https://github.com/floating-ui/floating-ui/blob/0a34fe9cc2c7483976785a71bd0777cd7c3f2a6a/packages/dom/src/autoUpdate.ts#L6-L33\n  elementResize: false,\n  animationFrame: false\n};\nexport function autoUpdateFloatingElement(reference, floating, update) {\n  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultOptions;\n  var _options_elementResize = options.elementResize,\n    elementResize = _options_elementResize === void 0 ? false : _options_elementResize,\n    restOptions = _object_without_properties(options, [\"elementResize\"]);\n  var autoUpdateLibDisposer = autoUpdateLib(reference, floating, update, _object_spread_props(_object_spread({}, restOptions), {\n    // Отключаем в библиотеке, т.к. под капотом используется `ResizeObserver`, которое не покрывается нашим `browserlist`.\n    // Вместо него мы используем `MutationObserver`.\n    // https://caniuse.com/resizeobserver\n    elementResize: false\n  }));\n  // В случае если `ResizeObserver` будет полифилиться или он будет покрываться нашим `browserlist`, то надо удалить\n  // код с `MutationObserver`.\n  var observer = null;\n  if (elementResize) {\n    var initialUpdate = true;\n    observer = new MutationObserver(function () {\n      if (!initialUpdate) {\n        update();\n      }\n      initialUpdate = false;\n    });\n    if (_instanceof(reference, Element)) {\n      observer.observe(reference, {\n        childList: true,\n        subtree: true\n      });\n    }\n    observer.observe(floating, {\n      childList: true,\n      subtree: true\n    });\n  }\n  return function () {\n    if (observer !== null) {\n      observer.disconnect();\n      observer = null;\n    }\n    autoUpdateLibDisposer();\n  };\n}","map":{"version":3,"names":["autoUpdate","autoUpdateLib","defaultOptions","ancestorScroll","ancestorResize","elementResize","animationFrame","autoUpdateFloatingElement","reference","floating","update","options","arguments","length","_options_elementResize","restOptions","_object_without_properties","autoUpdateLibDisposer","_object_spread_props","_object_spread","observer","initialUpdate","MutationObserver","_instanceof","Element","observe","childList","subtree","disconnect"],"sources":["../../../src/lib/floating/adapters.ts"],"sourcesContent":["import {\n  autoUpdate as autoUpdateLib,\n  type AutoUpdateOptions,\n  type FloatingElement,\n  type ReferenceType,\n} from '@vkontakte/vkui-floating-ui/react-dom';\n\nconst defaultOptions = {\n  ancestorScroll: true,\n  ancestorResize: true,\n  // По умолчанию отключаем, т.к. навешивать `MutationObserver` может быть дорого.\n  // В `autoUpdateLib` по умолчанию опция включена. Там используется ResizeObserver, но и он не менее дорогостоящий.\n  // https://github.com/floating-ui/floating-ui/blob/0a34fe9cc2c7483976785a71bd0777cd7c3f2a6a/packages/dom/src/autoUpdate.ts#L6-L33\n  elementResize: false,\n  animationFrame: false,\n};\n\nexport function autoUpdateFloatingElement(\n  reference: ReferenceType,\n  floating: FloatingElement,\n  update: () => void,\n  options: Partial<AutoUpdateOptions> = defaultOptions,\n): ReturnType<typeof autoUpdateLib> {\n  const { elementResize = false, ...restOptions } = options;\n\n  const autoUpdateLibDisposer = autoUpdateLib(reference, floating, update, {\n    ...restOptions,\n    // Отключаем в библиотеке, т.к. под капотом используется `ResizeObserver`, которое не покрывается нашим `browserlist`.\n    // Вместо него мы используем `MutationObserver`.\n    // https://caniuse.com/resizeobserver\n    elementResize: false,\n  });\n\n  // В случае если `ResizeObserver` будет полифилиться или он будет покрываться нашим `browserlist`, то надо удалить\n  // код с `MutationObserver`.\n  let observer: MutationObserver | null = null;\n  if (elementResize) {\n    let initialUpdate = true;\n    observer = new MutationObserver(() => {\n      if (!initialUpdate) {\n        update();\n      }\n\n      initialUpdate = false;\n    });\n\n    if (reference instanceof Element) {\n      observer.observe(reference, {\n        childList: true,\n        subtree: true,\n      });\n    }\n\n    observer.observe(floating, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  return () => {\n    if (observer !== null) {\n      observer.disconnect();\n      observer = null;\n    }\n    autoUpdateLibDisposer();\n  };\n}\n"],"mappings":";;;;AAAA,SACEA,UAAA,IAAcC,aAAa,QAItB;AAEP,IAAMC,cAAA,GAAiB;EACrBC,cAAA,EAAgB;EAChBC,cAAA,EAAgB;EAChB;EACA;EACA;EACAC,aAAA,EAAe;EACfC,cAAA,EAAgB;AAClB;AAEA,OAAO,SAASC,0BACdC,SAAwB,EACxBC,QAAyB,EACzBC,MAAkB;MAClBC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAsCV,cAAA;EAEtC,IAAAY,sBAAA,GAAkDH,OAAA,CAA1CN,aAAA;IAAAA,aAAA,GAAAS,sBAAA,cAAgB,QAAAA,sBAAA;IAAUC,WAAA,GAAAC,0BAAA,CAAgBL,OAAA,GAA1C,gB;EAER,IAAMM,qBAAA,GAAwBhB,aAAA,CAAcO,SAAA,EAAWC,QAAA,EAAUC,MAAA,EAAQQ,oBAAA,CAAAC,cAAA,KACpEJ,WAAA;IACH;IACA;IACA;IACAV,aAAA,EAAe;;EAGjB;EACA;EACA,IAAIe,QAAA,GAAoC;EACxC,IAAIf,aAAA,EAAe;IACjB,IAAIgB,aAAA,GAAgB;IACpBD,QAAA,GAAW,IAAIE,gBAAA,CAAiB;MAC9B,IAAI,CAACD,aAAA,EAAe;QAClBX,MAAA;MACF;MAEAW,aAAA,GAAgB;IAClB;IAEA,IAAIE,WAAS,CAATf,SAAA,EAAqBgB,OAAA,GAAS;MAChCJ,QAAA,CAASK,OAAO,CAACjB,SAAA,EAAW;QAC1BkB,SAAA,EAAW;QACXC,OAAA,EAAS;MACX;IACF;IAEAP,QAAA,CAASK,OAAO,CAAChB,QAAA,EAAU;MACzBiB,SAAA,EAAW;MACXC,OAAA,EAAS;IACX;EACF;EAEA,OAAO;IACL,IAAIP,QAAA,KAAa,MAAM;MACrBA,QAAA,CAASQ,UAAU;MACnBR,QAAA,GAAW;IACb;IACAH,qBAAA;EACF;AACF"},"metadata":{},"sourceType":"module"}