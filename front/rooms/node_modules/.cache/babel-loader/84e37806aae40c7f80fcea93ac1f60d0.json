{"ast":null,"code":"/* eslint-disable @typescript-eslint/quotes */import { Replacer } from \"../lib/replacer\";\nimport { fromCodePoint, getCodePointAt, numericUnicodeMap } from \"../lib/codepoints\";\nimport { buildFullNamedEntities, fullNamedEntities } from \"./entity\";\nvar escapeReplacer = /*#__PURE__*/new Replacer({\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  \"'\": \"&#39;\",\n  '\"': \"&quot;\"\n});\nvar unescapeReplacer = /*#__PURE__*/new Replacer({\n  \"&amp;\": \"&\",\n  \"&#38;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&#60;\": \"<\",\n  \"&gt;\": \">\",\n  \"&#62;\": \">\",\n  \"&apos;\": \"'\",\n  \"&#39;\": \"'\",\n  \"&quot;\": '\"',\n  \"&#34;\": '\"'\n});\nvar namedEntities = {\n  \"amp;\": \"&\",\n  \"lt;\": \"<\",\n  \"gt;\": \">\",\n  \"quot;\": '\"',\n  \"apos;\": \"'\"\n};\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function escape(input) {\n  return escapeReplacer.replace(input);\n}\n/**\n * Unescape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function unescape(input) {\n  return unescapeReplacer.replace(input);\n}\nexport var outOfBoundsChar = /*#__PURE__*/String.fromCharCode(65533);\nvar ENCODE_REGEX = /(?:[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nexport function encodeHTMLEntities(input) {\n  if (input == null) {\n    return \"\";\n  }\n  return input.replace(ENCODE_REGEX, function (entity) {\n    var code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);\n    return \"&#\" + String(code) + \";\";\n  });\n}\nvar DECODE_REGEX = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g;\nfunction decodeString(input, entities) {\n  if (typeof input !== \"string\" || !input) {\n    return \"\";\n  }\n  return input.replace(DECODE_REGEX, function (entity) {\n    if (entity[1] === \"#\") {\n      // We need to have at least \"&#.\".\n      if (entity.length <= 3) {\n        return entity;\n      }\n      var secondChar = entity.charAt(2);\n      var code = secondChar === \"x\" || secondChar === \"X\" ? parseInt(entity.substr(3).toLowerCase(), 16) : parseInt(entity.substr(2));\n      if (code >= 0x10ffff) {\n        return outOfBoundsChar;\n      }\n      if (code > 65535) {\n        return fromCodePoint(code);\n      }\n      return String.fromCharCode(numericUnicodeMap[code] || code);\n    }\n    return entities[entity.slice(1)] || entity;\n  });\n}\nexport function decodeHTMLEntitiesDeep(input) {\n  if (typeof input === \"string\") {\n    return decodeHTMLEntities(input);\n  }\n  if (typeof input === \"object\") {\n    var correctType = Object.prototype.toString.apply(input);\n    if (correctType === \"[object Array]\") {\n      return input.map(function (item) {\n        return decodeHTMLEntitiesDeep(item);\n      });\n    }\n    if (correctType === \"[object Object]\") {\n      var response = {};\n      Object.keys(input).forEach(function (item) {\n        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(input[item]);\n      });\n      return response;\n    }\n  }\n  return input;\n}\n/**\n * `decodeHTMLEntities` декодирует зарезервированные HTML-сущности.\n *\n * Если нужна возможность декодировать все сущности, используйте\n * {@link decodeHTMLFullEntities}\n *\n * @param input текст который необходимо декодировать\n * @param entities кастомный словарь сущностей `{'lt;': '<'}`\n */\nexport function decodeHTMLEntities(input) {\n  var entities = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : namedEntities;\n  return decodeString(input, entities);\n}\n/**\n * `decodeHTMLFullEntities` декодирует все HTML-сущности.\n *\n * Если вам нужно декодировать не все сущности, используйте\n * {@link decodeHTMLEntities} и кастомный словарь.\n *\n * @param input текст который необходимо декодировать\n */\nexport function decodeHTMLFullEntities(input) {\n  buildFullNamedEntities();\n  return decodeString(input, fullNamedEntities);\n}","map":{"version":3,"names":["Replacer","fromCodePoint","getCodePointAt","numericUnicodeMap","buildFullNamedEntities","fullNamedEntities","escapeReplacer","unescapeReplacer","namedEntities","escape","input","replace","unescape","outOfBoundsChar","String","fromCharCode","ENCODE_REGEX","encodeHTMLEntities","entity","code","length","charCodeAt","DECODE_REGEX","decodeString","entities","secondChar","charAt","parseInt","substr","toLowerCase","slice","decodeHTMLEntitiesDeep","decodeHTMLEntities","correctType","Object","prototype","toString","apply","map","item","response","keys","forEach","arguments","decodeHTMLFullEntities"],"sources":["../../../src/html/escape.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/quotes */\nimport { Replacer } from '../lib/replacer';\nimport { fromCodePoint, getCodePointAt, numericUnicodeMap } from '../lib/codepoints';\nimport { Dictionary } from '../types';\nimport { buildFullNamedEntities, fullNamedEntities } from './entity';\n\nconst escapeReplacer = /*#__PURE__*/ new Replacer({\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;',\n});\n\nconst unescapeReplacer = /*#__PURE__*/ new Replacer({\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"',\n});\n\nconst namedEntities: Record<string, string> = {\n  'amp;': '&',\n  'lt;': '<',\n  'gt;': '>',\n  'quot;': '\"',\n  'apos;': `'`,\n};\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function escape(input: string): string {\n  return escapeReplacer.replace(input);\n}\n\n/**\n * Unescape HTML entities such as `&`, `<`, `>`, `\"`, and `'`\n * @param {string} input\n */\nexport function unescape(input: string): string {\n  return unescapeReplacer.replace(input);\n}\n\nexport const outOfBoundsChar = /*#__PURE__*/ String.fromCharCode(65533);\n\nconst ENCODE_REGEX =\n  /(?:[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\n\nexport function encodeHTMLEntities(input: string): string {\n  if (input == null) {\n    return '';\n  }\n\n  return input.replace(ENCODE_REGEX, (entity) => {\n    const code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);\n    return '&#' + String(code) + ';';\n  });\n}\n\nconst DECODE_REGEX = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g;\n\nfunction decodeString(input: string, entities: Record<string, string>): string {\n  if (typeof input !== 'string' || !input) {\n    return '';\n  }\n\n  return input.replace(DECODE_REGEX, (entity) => {\n    if (entity[1] === '#') {\n      // We need to have at least \"&#.\".\n      if (entity.length <= 3) {\n        return entity;\n      }\n\n      const secondChar = entity.charAt(2);\n      const code =\n        secondChar === 'x' || secondChar === 'X'\n          ? parseInt(entity.substr(3).toLowerCase(), 16)\n          : parseInt(entity.substr(2));\n\n      if (code >= 0x10ffff) {\n        return outOfBoundsChar;\n      }\n\n      if (code > 65535) {\n        return fromCodePoint(code);\n      }\n\n      return String.fromCharCode(numericUnicodeMap[code] || code);\n    }\n\n    return entities[entity.slice(1)] || entity;\n  });\n}\n\nexport function decodeHTMLEntitiesDeep<T>(input: T): T {\n  if (typeof input === 'string') {\n    return decodeHTMLEntities(input) as unknown as T;\n  }\n\n  if (typeof input === 'object') {\n    const correctType = Object.prototype.toString.apply(input);\n\n    if (correctType === '[object Array]') {\n      return (input as unknown[]).map((item) => {\n        return decodeHTMLEntitiesDeep(item);\n      }) as T;\n    }\n\n    if (correctType === '[object Object]') {\n      const response: Dictionary<unknown> = {};\n      Object.keys(input as Dictionary<unknown>).forEach((item) => {\n        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(\n          (input as Dictionary<unknown>)[item],\n        );\n      });\n\n      return response as unknown as T;\n    }\n  }\n\n  return input;\n}\n\n/**\n * `decodeHTMLEntities` декодирует зарезервированные HTML-сущности.\n *\n * Если нужна возможность декодировать все сущности, используйте\n * {@link decodeHTMLFullEntities}\n *\n * @param input текст который необходимо декодировать\n * @param entities кастомный словарь сущностей `{'lt;': '<'}`\n */\nexport function decodeHTMLEntities(input: string, entities = namedEntities): string {\n  return decodeString(input, entities);\n}\n\n/**\n * `decodeHTMLFullEntities` декодирует все HTML-сущности.\n *\n * Если вам нужно декодировать не все сущности, используйте\n * {@link decodeHTMLEntities} и кастомный словарь.\n *\n * @param input текст который необходимо декодировать\n */\nexport function decodeHTMLFullEntities(input: string): string {\n  buildFullNamedEntities();\n\n  return decodeString(input, fullNamedEntities);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}