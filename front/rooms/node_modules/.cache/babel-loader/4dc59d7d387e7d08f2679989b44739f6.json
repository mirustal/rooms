{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from \"@vkontakte/vkjs\";\nimport { AdaptivityContext } from \"../components/AdaptivityProvider/AdaptivityContext\";\nimport { getOrDefault } from \"../helpers/getOrDefault\";\nimport { getSizeX, getSizeY, getViewHeightByMediaQueries, getViewWidthByMediaQueries, tryToCheckIsDesktop } from \"../lib/adaptivity\";\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from \"../lib/matchMedia\";\nimport { useMediaQueries } from \"./useMediaQueries\";\nimport { usePlatform } from \"./usePlatform\";\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\nexport var useAdaptivityWithJSMediaQueries = function () {\n  if (!canUseDOM) {\n    console.error(\"[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\\n\\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\\n\\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.\");\n  }\n  var _React_useContext = React.useContext(AdaptivityContext),\n    viewWidthContext = _React_useContext.viewWidth,\n    viewHeightContext = _React_useContext.viewHeight,\n    sizeXContext = _React_useContext.sizeX,\n    sizeYContext = _React_useContext.sizeY,\n    hasPointerContext = _React_useContext.hasPointer,\n    hasHoverContext = _React_useContext.hasHover;\n  var platform = usePlatform();\n  var mediaQueries = useMediaQueries();\n  var _React_useState = _sliced_to_array(React.useState(function () {\n      return [getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)), getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries))];\n    }), 2),\n    _React_useState_ = _sliced_to_array(_React_useState[0], 2),\n    viewWidthLocal = _React_useState_[0],\n    viewHeightLocal = _React_useState_[1],\n    setViewSizeLocal = _React_useState[1];\n  var adaptivityProps = React.useMemo(function () {\n    var hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    var hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    var viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    var viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    var sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    var sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    var isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n    return {\n      viewWidth: viewWidth,\n      viewHeight: viewHeight,\n      sizeX: sizeX,\n      sizeY: sizeY,\n      hasPointer: hasPointer,\n      hasHover: hasHover,\n      isDesktop: isDesktop\n    };\n  }, [viewWidthLocal, viewHeightLocal, viewWidthContext, viewHeightContext, sizeXContext, sizeYContext, hasPointerContext, hasHoverContext, platform]);\n  React.useEffect(function () {\n    var handleMediaQuery = function () {\n      setViewSizeLocal(function (prevSizeLocal) {\n        var newViewWidthLocal = getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries));\n        var newViewHeightLocal = getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries));\n        var _prevSizeLocal = _sliced_to_array(prevSizeLocal, 2),\n          prevViewWidthLocal = _prevSizeLocal[0],\n          prevViewHeightLocal = _prevSizeLocal[1];\n        if (prevViewWidthLocal !== newViewWidthLocal || prevViewHeightLocal !== newViewHeightLocal) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n        return prevSizeLocal;\n      });\n    };\n    if (!viewWidthContext) {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile].forEach(function (matchMediaListener) {\n        return matchMediaListAddListener(matchMediaListener, handleMediaQuery);\n      });\n    }\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(function (matchMediaListener) {\n        return matchMediaListAddListener(matchMediaListener, handleMediaQuery);\n      });\n    }\n    return function () {\n      [mediaQueries.desktopPlus, mediaQueries.tablet, mediaQueries.smallTablet, mediaQueries.mobile, mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(function (matchMediaListener) {\n        return matchMediaListRemoveListener(matchMediaListener, handleMediaQuery);\n      });\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n  return adaptivityProps;\n};","map":{"version":3,"names":["React","canUseDOM","hasHover","hasHoverLib","hasMouse","hasPointerLib","AdaptivityContext","getOrDefault","getSizeX","getSizeY","getViewHeightByMediaQueries","getViewWidthByMediaQueries","tryToCheckIsDesktop","matchMediaListAddListener","matchMediaListRemoveListener","useMediaQueries","usePlatform","useAdaptivityWithJSMediaQueries","console","error","_React_useContext","useContext","viewWidthContext","viewWidth","viewHeightContext","viewHeight","sizeXContext","sizeX","sizeYContext","sizeY","hasPointerContext","hasPointer","hasHoverContext","platform","mediaQueries","_React_useState","_sliced_to_array","useState","viewWidthLocal","_React_useState_","viewHeightLocal","setViewSizeLocal","adaptivityProps","useMemo","isDesktop","useEffect","handleMediaQuery","prevSizeLocal","newViewWidthLocal","newViewHeightLocal","_prevSizeLocal","prevViewWidthLocal","prevViewHeightLocal","desktopPlus","tablet","smallTablet","mobile","forEach","matchMediaListener","mediumHeight","mobileLandscapeHeight"],"sources":["../../src/hooks/useAdaptivityWithJSMediaQueries.ts"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM, hasHover as hasHoverLib, hasMouse as hasPointerLib } from '@vkontakte/vkjs';\nimport {\n  AdaptivityContext,\n  type AdaptivityProps as BaseAdaptivityProps,\n} from '../components/AdaptivityProvider/AdaptivityContext';\nimport { getOrDefault } from '../helpers/getOrDefault';\nimport {\n  getSizeX,\n  getSizeY,\n  getViewHeightByMediaQueries,\n  getViewWidthByMediaQueries,\n  tryToCheckIsDesktop,\n} from '../lib/adaptivity';\nimport { matchMediaListAddListener, matchMediaListRemoveListener } from '../lib/matchMedia';\nimport { useMediaQueries } from './useMediaQueries';\nimport { usePlatform } from './usePlatform';\n\nexport interface UseAdaptivityWithJSMediaQueries extends Required<BaseAdaptivityProps> {\n  isDesktop: boolean;\n}\n\n/**\n * Высчитывает и возвращает параметры адаптивности при изменении вьюпорта.\n *\n * Берёт в приоритет значения из `AdaptivityContext`.\n *\n * > ⚠ SSR\n * >\n * > Во избежания ошибок при гидратации, не используйте данный хук, если есть вероятность, что компонент будет отрендерен\n * > на стороне сервера.\n * >\n * > Лучше всего использовать для всплывающих окон, т.к. они вызываются только после загрузки\n * > страницы либо пользователем, либо программно.\n */\nexport const useAdaptivityWithJSMediaQueries = (): UseAdaptivityWithJSMediaQueries => {\n  if (!canUseDOM) {\n    console.error(`[useAdaptivityWithJSMediaQueries] Похоже, вы пытаетесь использовать хук вне браузера.\n\nПостарайтесь этого избегать, чтобы не было ошибок при гидратации: при SSR нет информации о размерах экрана.\n\nИспользуйте CSS Media Query или библиотеку по типу https://github.com/artsy/fresnel.`);\n  }\n\n  const {\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    hasPointer: hasPointerContext,\n    hasHover: hasHoverContext,\n  } = React.useContext(AdaptivityContext);\n\n  const platform = usePlatform();\n  const mediaQueries = useMediaQueries();\n\n  const [[viewWidthLocal, viewHeightLocal], setViewSizeLocal] = React.useState(() => [\n    getOrDefault(viewWidthContext, getViewWidthByMediaQueries(mediaQueries)),\n    getOrDefault(viewHeightContext, getViewHeightByMediaQueries(mediaQueries)),\n  ]);\n\n  const adaptivityProps = React.useMemo(() => {\n    const hasPointer = getOrDefault(hasPointerContext, hasPointerLib);\n    const hasHover = getOrDefault(hasHoverContext, hasHoverLib);\n    const viewWidth = getOrDefault(viewWidthContext, viewWidthLocal);\n    const viewHeight = getOrDefault(viewHeightContext, viewHeightLocal);\n    const sizeX = getOrDefault(sizeXContext, getSizeX(viewWidth));\n    const sizeY = getOrDefault(sizeYContext, getSizeY(viewWidth, viewHeight, hasPointer));\n    const isDesktop = tryToCheckIsDesktop(viewWidth, viewHeight, hasPointer, platform);\n\n    return {\n      viewWidth,\n      viewHeight,\n      sizeX,\n      sizeY,\n      hasPointer,\n      hasHover,\n      isDesktop,\n    };\n  }, [\n    viewWidthLocal,\n    viewHeightLocal,\n    viewWidthContext,\n    viewHeightContext,\n    sizeXContext,\n    sizeYContext,\n    hasPointerContext,\n    hasHoverContext,\n    platform,\n  ]);\n\n  React.useEffect(() => {\n    const handleMediaQuery = () => {\n      setViewSizeLocal((prevSizeLocal) => {\n        const newViewWidthLocal = getOrDefault(\n          viewWidthContext,\n          getViewWidthByMediaQueries(mediaQueries),\n        );\n        const newViewHeightLocal = getOrDefault(\n          viewHeightContext,\n          getViewHeightByMediaQueries(mediaQueries),\n        );\n\n        const [prevViewWidthLocal, prevViewHeightLocal] = prevSizeLocal;\n\n        if (\n          prevViewWidthLocal !== newViewWidthLocal ||\n          prevViewHeightLocal !== newViewHeightLocal\n        ) {\n          return [newViewWidthLocal, newViewHeightLocal];\n        }\n\n        return prevSizeLocal;\n      });\n    };\n\n    if (!viewWidthContext) {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n      ].forEach((matchMediaListener) =>\n        matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    if (!viewHeightContext) {\n      [mediaQueries.mediumHeight, mediaQueries.mobileLandscapeHeight].forEach(\n        (matchMediaListener) => matchMediaListAddListener(matchMediaListener, handleMediaQuery),\n      );\n    }\n\n    return () => {\n      [\n        mediaQueries.desktopPlus,\n        mediaQueries.tablet,\n        mediaQueries.smallTablet,\n        mediaQueries.mobile,\n        mediaQueries.mediumHeight,\n        mediaQueries.mobileLandscapeHeight,\n      ].forEach((matchMediaListener) =>\n        matchMediaListRemoveListener(matchMediaListener, handleMediaQuery),\n      );\n    };\n  }, [mediaQueries, viewWidthContext, viewHeightContext]);\n\n  return adaptivityProps;\n};\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,SAAS,EAAEC,QAAA,IAAYC,WAAW,EAAEC,QAAA,IAAYC,aAAa,QAAQ;AAC9E,SACEC,iBAAiB,QAEZ;AACP,SAASC,YAAY,QAAQ;AAC7B,SACEC,QAAQ,EACRC,QAAQ,EACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,mBAAmB,QACd;AACP,SAASC,yBAAyB,EAAEC,4BAA4B,QAAQ;AACxE,SAASC,eAAe,QAAQ;AAChC,SAASC,WAAW,QAAQ;AAM5B;;;;;;;;;;;;;AAaA,OAAO,IAAMC,+BAAA,GAAkC,SAAAA,CAAA;EAC7C,IAAI,CAAChB,SAAA,EAAW;IACdiB,OAAA,CAAQC,KAAK,CAAE;EAKjB;EAEA,IAOIC,iBAAA,GAAApB,KAAA,CAAMqB,UAAU,CAACf,iBAAA;IANnBgB,gBAAW,GAMTF,iBAAA,CANFG,SAAA;IACAC,iBAAY,GAKVJ,iBAAA,CALFK,UAAA;IACAC,YAAO,GAILN,iBAAA,CAJFO,KAAA;IACAC,YAAO,GAGLR,iBAAA,CAHFS,KAAA;IACAC,iBAAY,GAEVV,iBAAA,CAFFW,UAAA;IACAC,eAAU,GACRZ,iBAAA,CADFlB,QAAA;EAGF,IAAM+B,QAAA,GAAWjB,WAAA;EACjB,IAAMkB,YAAA,GAAenB,eAAA;EAErB,IAA8DoB,eAAA,GAAAC,gBAAA,CAAApC,KAAA,CAAMqC,QAAQ,CAAC;aAAM,CACjF9B,YAAA,CAAae,gBAAA,EAAkBX,0BAAA,CAA2BuB,YAAA,IAC1D3B,YAAA,CAAaiB,iBAAA,EAAmBd,2BAAA,CAA4BwB,YAAA,GAC7D;;wCAH6DC,eAAA;IAAtDG,cAAA,GAAAC,gBAAA;IAAgBC,eAAA,GAAAD,gBAAA;IAAkBE,gBAAA,GAAoBN,eAAA;EAK9D,IAAMO,eAAA,GAAkB1C,KAAA,CAAM2C,OAAO,CAAC;IACpC,IAAMZ,UAAA,GAAaxB,YAAA,CAAauB,iBAAA,EAAmBzB,aAAA;IACnD,IAAMH,QAAA,GAAWK,YAAA,CAAayB,eAAA,EAAiB7B,WAAA;IAC/C,IAAMoB,SAAA,GAAYhB,YAAA,CAAae,gBAAA,EAAkBgB,cAAA;IACjD,IAAMb,UAAA,GAAalB,YAAA,CAAaiB,iBAAA,EAAmBgB,eAAA;IACnD,IAAMb,KAAA,GAAQpB,YAAA,CAAamB,YAAA,EAAclB,QAAA,CAASe,SAAA;IAClD,IAAMM,KAAA,GAAQtB,YAAA,CAAaqB,YAAA,EAAcnB,QAAA,CAASc,SAAA,EAAWE,UAAA,EAAYM,UAAA;IACzE,IAAMa,SAAA,GAAYhC,mBAAA,CAAoBW,SAAA,EAAWE,UAAA,EAAYM,UAAA,EAAYE,QAAA;IAEzE,OAAO;MACLV,SAAA,EAAAA,SAAA;MACAE,UAAA,EAAAA,UAAA;MACAE,KAAA,EAAAA,KAAA;MACAE,KAAA,EAAAA,KAAA;MACAE,UAAA,EAAAA,UAAA;MACA7B,QAAA,EAAAA,QAAA;MACA0C,SAAA,EAAAA;IACF;EACF,GAAG,CACDN,cAAA,EACAE,eAAA,EACAlB,gBAAA,EACAE,iBAAA,EACAE,YAAA,EACAE,YAAA,EACAE,iBAAA,EACAE,eAAA,EACAC,QAAA,CACD;EAEDjC,KAAA,CAAM6C,SAAS,CAAC;IACd,IAAMC,gBAAA,GAAmB,SAAAA,CAAA;MACvBL,gBAAA,CAAiB,UAACM,aAAA;QAChB,IAAMC,iBAAA,GAAoBzC,YAAA,CACxBe,gBAAA,EACAX,0BAAA,CAA2BuB,YAAA;QAE7B,IAAMe,kBAAA,GAAqB1C,YAAA,CACzBiB,iBAAA,EACAd,2BAAA,CAA4BwB,YAAA;QAG9B,IAAkDgB,cAAA,GAAAd,gBAAA,CAAAW,aAAA;UAA3CI,kBAAA,GAA2CD,cAAA;UAAvBE,mBAAA,GAAuBF,cAAA;QAElD,IACEC,kBAAA,KAAuBH,iBAAA,IACvBI,mBAAA,KAAwBH,kBAAA,EACxB;UACA,OAAO,CAACD,iBAAA,EAAmBC,kBAAA,CAAmB;QAChD;QAEA,OAAOF,aAAA;MACT;IACF;IAEA,IAAI,CAACzB,gBAAA,EAAkB;MACrB,CACEY,YAAA,CAAamB,WAAW,EACxBnB,YAAA,CAAaoB,MAAM,EACnBpB,YAAA,CAAaqB,WAAW,EACxBrB,YAAA,CAAasB,MAAM,CACpB,CAACC,OAAO,CAAC,UAACC,kBAAA;eACT7C,yBAAA,CAA0B6C,kBAAA,EAAoBZ,gBAAA;;IAElD;IAEA,IAAI,CAACtB,iBAAA,EAAmB;MACtB,CAACU,YAAA,CAAayB,YAAY,EAAEzB,YAAA,CAAa0B,qBAAqB,CAAC,CAACH,OAAO,CACrE,UAACC,kBAAA;eAAuB7C,yBAAA,CAA0B6C,kBAAA,EAAoBZ,gBAAA;;IAE1E;IAEA,OAAO;MACL,CACEZ,YAAA,CAAamB,WAAW,EACxBnB,YAAA,CAAaoB,MAAM,EACnBpB,YAAA,CAAaqB,WAAW,EACxBrB,YAAA,CAAasB,MAAM,EACnBtB,YAAA,CAAayB,YAAY,EACzBzB,YAAA,CAAa0B,qBAAqB,CACnC,CAACH,OAAO,CAAC,UAACC,kBAAA;eACT5C,4BAAA,CAA6B4C,kBAAA,EAAoBZ,gBAAA;;IAErD;EACF,GAAG,CAACZ,YAAA,EAAcZ,gBAAA,EAAkBE,iBAAA,CAAkB;EAEtD,OAAOkB,eAAA;AACT"},"metadata":{},"sourceType":"module"}