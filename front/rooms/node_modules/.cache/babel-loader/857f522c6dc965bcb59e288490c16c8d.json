{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nexport var useChipsInput = function (props) {\n  var value = props.value,\n    getOptionValue = props.getOptionValue,\n    onChange = props.onChange,\n    onInputChange = props.onInputChange,\n    getNewOptionData = props.getNewOptionData;\n  var _React_useState = _sliced_to_array(React.useState(props.inputValue), 2),\n    fieldValue = _React_useState[0],\n    setFieldValue = _React_useState[1];\n  var _React_useState1 = _sliced_to_array(React.useState(value !== null && value !== void 0 ? value : []), 2),\n    selectedOptions = _React_useState1[0],\n    setSelectedOptions = _React_useState1[1];\n  var clearInput = React.useCallback(function () {\n    setFieldValue(\"\");\n    onInputChange({\n      target: {\n        value: \"\"\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value, value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue(\"\");\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","_React_useState","_sliced_to_array","useState","inputValue","fieldValue","setFieldValue","_React_useState1","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"sources":["../../src/hooks/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsInputBaseProps } from '../components/ChipsInputBase/ChipsInputBase';\n\nexport const useChipsInput = <Option extends ChipOption>(\n  props: Partial<ChipsInputBaseProps<Option>>,\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue('');\n    onInputChange!({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange],\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) => getOptionValue!(newOption) !== getOptionValue!(option),\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange],\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption],\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData],\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}