{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { useFocusVisible } from \"../../hooks/useFocusVisible\";\nimport { callMultiple } from \"../../lib/callMultiple\";\nimport { FocusVisible } from \"../FocusVisible/FocusVisible\";\nimport { RootComponent } from \"../RootComponent/RootComponent\";\n/**\n * Некликабельный компонент. Отключаем возможность нажимать на компонент.\n */\nvar NonClickable = function (_param) /*#__PURE__*/{\n  var href = _param.href,\n    onClick = _param.onClick,\n    onClickCapture = _param.onClickCapture,\n    restProps = _object_without_properties(_param, [\"href\", \"onClick\", \"onClickCapture\"]);\n  return React.createElement(RootComponent, restProps);\n};\n/**\n * Кликабельный компонент. Добавляем кучу обвесов\n */\nvar RealClickable = function (_param) {\n  var baseClassName = _param.baseClassName,\n    children = _param.children,\n    _param_focusVisibleMode = _param.focusVisibleMode,\n    focusVisibleMode = _param_focusVisibleMode === void 0 ? \"inside\" : _param_focusVisibleMode,\n    restProps = _object_without_properties(_param, [\"baseClassName\", \"children\", \"focusVisibleMode\"]);\n  var _useFocusVisible = useFocusVisible(),\n    focusVisible = _useFocusVisible.focusVisible,\n    onBlur = _useFocusVisible.onBlur,\n    onFocus = _useFocusVisible.onFocus;\n  return /*#__PURE__*/React.createElement(RootComponent, _object_spread({\n    baseClassName: classNames(baseClassName, \"vkuiClickable__host\"),\n    onBlur: callMultiple(onBlur, restProps.onBlur),\n    onFocus: callMultiple(onFocus, restProps.onFocus)\n  }, restProps), children, /*#__PURE__*/React.createElement(FocusVisible, {\n    visible: focusVisible,\n    mode: focusVisibleMode\n  }));\n};\n/**\n * Проверяем, является ли компонент кликабельным\n */\nfunction checkClickable(props) {\n  return (props.href !== undefined || props.onClick !== undefined || props.onClickCapture !== undefined) && !props.disabled;\n}\n/**\n * Определяет правильный компонент и его свойства\n *\n * - если передан Component, используем его\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nfunction component(param) {\n  var Component = param.Component,\n    onClick = param.onClick,\n    onClickCapture = param.onClickCapture,\n    href = param.href,\n    disabled = param.disabled;\n  if (Component !== undefined) {\n    return {\n      Component: Component\n    };\n  } else if (href !== undefined) {\n    return {\n      \"Component\": \"a\",\n      \"role\": \"link\",\n      \"aria-disabled\": disabled\n    };\n  } else if (onClick !== undefined || onClickCapture !== undefined) {\n    return {\n      \"Component\": \"div\",\n      \"role\": \"button\",\n      \"tabIndex\": disabled ? undefined : 0,\n      \"aria-disabled\": disabled\n    };\n  }\n  return {};\n}\n/**\n * Базовый кликабельный корневой компонент.\n *\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nexport var Clickable = function (_param) {\n  var _param_focusVisibleMode = _param.focusVisibleMode,\n    focusVisibleMode = _param_focusVisibleMode === void 0 ? \"inside\" : _param_focusVisibleMode,\n    restProps = _object_without_properties(_param, [\"focusVisibleMode\"]);\n  var commonProps = component(restProps);\n  var isClickable = checkClickable(restProps);\n  if (isClickable) {\n    return /*#__PURE__*/React.createElement(RealClickable, _object_spread({\n      focusVisibleMode: focusVisibleMode\n    }, commonProps, restProps));\n  }\n  return /*#__PURE__*/React.createElement(NonClickable, _object_spread({}, commonProps, restProps));\n};","map":{"version":3,"names":["React","classNames","useFocusVisible","callMultiple","FocusVisible","RootComponent","NonClickable","_param","href","onClick","onClickCapture","restProps","_object_without_properties","createElement","RealClickable","baseClassName","children","_param_focusVisibleMode","focusVisibleMode","_useFocusVisible","focusVisible","onBlur","onFocus","_object_spread","visible","mode","checkClickable","props","undefined","disabled","component","param","Component","Clickable","commonProps","isClickable"],"sources":["../../../src/components/Clickable/Clickable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useFocusVisible } from '../../hooks/useFocusVisible';\nimport { callMultiple } from '../../lib/callMultiple';\nimport { FocusVisible, FocusVisibleMode } from '../FocusVisible/FocusVisible';\nimport { RootComponent, RootComponentProps } from '../RootComponent/RootComponent';\nimport styles from './Clickable.module.css';\n\nexport interface ClickableProps<T> extends RootComponentProps<T> {\n  baseClassName?: string;\n  focusVisibleMode?: FocusVisibleMode;\n}\n\n/**\n * Некликабельный компонент. Отключаем возможность нажимать на компонент.\n */\nconst NonClickable = <T,>({\n  href,\n  onClick,\n  onClickCapture,\n  ...restProps\n}: RootComponentProps<T>) => <RootComponent {...restProps} />;\n\n/**\n * Кликабельный компонент. Добавляем кучу обвесов\n */\nconst RealClickable = <T,>({\n  baseClassName,\n  children,\n  focusVisibleMode = 'inside',\n  ...restProps\n}: ClickableProps<T>) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible();\n\n  return (\n    <RootComponent\n      baseClassName={classNames(baseClassName, styles['Clickable__host'])}\n      onBlur={callMultiple(onBlur, restProps.onBlur)}\n      onFocus={callMultiple(onFocus, restProps.onFocus)}\n      {...restProps}\n    >\n      {children}\n      <FocusVisible visible={focusVisible} mode={focusVisibleMode} />\n    </RootComponent>\n  );\n};\n\n/**\n * Проверяем, является ли компонент кликабельным\n */\nfunction checkClickable<T>(props: ClickableProps<T>): boolean {\n  return (\n    (props.href !== undefined ||\n      props.onClick !== undefined ||\n      props.onClickCapture !== undefined) &&\n    !props.disabled\n  );\n}\n\n/**\n * Определяет правильный компонент и его свойства\n *\n * - если передан Component, используем его\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nfunction component<T>({\n  Component,\n  onClick,\n  onClickCapture,\n  href,\n  disabled,\n}: RootComponentProps<T>): RootComponentProps<T> {\n  if (Component !== undefined) {\n    return { Component };\n  } else if (href !== undefined) {\n    return { 'Component': 'a', 'role': 'link', 'aria-disabled': disabled };\n  } else if (onClick !== undefined || onClickCapture !== undefined) {\n    return {\n      'Component': 'div',\n      'role': 'button',\n      'tabIndex': disabled ? undefined : 0,\n      'aria-disabled': disabled,\n    };\n  }\n\n  return {};\n}\n\n/**\n * Базовый кликабельный корневой компонент.\n *\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nexport const Clickable = <T,>({ focusVisibleMode = 'inside', ...restProps }: ClickableProps<T>) => {\n  const commonProps = component(restProps);\n  const isClickable = checkClickable(restProps);\n\n  if (isClickable) {\n    return <RealClickable focusVisibleMode={focusVisibleMode} {...commonProps} {...restProps} />;\n  }\n\n  return <NonClickable {...commonProps} {...restProps} />;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}