{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useIsomorphicLayoutEffect } from \"../lib/useIsomorphicLayoutEffect\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\nexport function useFocusWithin(ref) {\n  var document = useDOM().document;\n  var isFocusWithin = function () {\n    if (!ref.current || !document) {\n      return false;\n    }\n    return ref.current.contains(document.activeElement);\n  };\n  var _React_useState = _sliced_to_array(React.useState(isFocusWithin), 2),\n    focusWithin = _React_useState[0],\n    setFocusWithin = _React_useState[1];\n  var listener = function () {\n    var focus = isFocusWithin();\n    focus !== focusWithin && setFocusWithin(focus);\n  };\n  // Проверяем autoFocus\n  useIsomorphicLayoutEffect(listener, []);\n  useGlobalEventListener(document, \"focus\", listener, {\n    capture: true\n  });\n  useGlobalEventListener(document, \"blur\", listener, {\n    capture: true\n  });\n  return focusWithin;\n}","map":{"version":3,"names":["React","useDOM","useIsomorphicLayoutEffect","useGlobalEventListener","useFocusWithin","ref","document","isFocusWithin","current","contains","activeElement","_React_useState","_sliced_to_array","useState","focusWithin","setFocusWithin","listener","focus","capture"],"sources":["../../src/hooks/useFocusWithin.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useIsomorphicLayoutEffect } from '../lib/useIsomorphicLayoutEffect';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\nexport function useFocusWithin(ref: React.RefObject<HTMLElement | null>): boolean {\n  const { document } = useDOM();\n  const isFocusWithin = () => {\n    if (!ref.current || !document) {\n      return false;\n    }\n\n    return ref.current.contains(document.activeElement);\n  };\n\n  const [focusWithin, setFocusWithin] = React.useState<boolean>(isFocusWithin);\n\n  const listener = () => {\n    const focus = isFocusWithin();\n    focus !== focusWithin && setFocusWithin(focus);\n  };\n\n  // Проверяем autoFocus\n  useIsomorphicLayoutEffect(listener, []);\n\n  useGlobalEventListener(document, 'focus', listener, { capture: true });\n  useGlobalEventListener(document, 'blur', listener, { capture: true });\n\n  return focusWithin;\n}\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,MAAM,QAAQ;AACvB,SAASC,yBAAyB,QAAQ;AAC1C,SAASC,sBAAsB,QAAQ;AAEvC,OAAO,SAASC,eAAeC,GAAwC;EACrE,IAAMC,QAAE,GAAaL,MAAA,GAAbK,QAAA;EACR,IAAMC,aAAA,GAAgB,SAAAA,CAAA;IACpB,IAAI,CAACF,GAAA,CAAIG,OAAO,IAAI,CAACF,QAAA,EAAU;MAC7B,OAAO;IACT;IAEA,OAAOD,GAAA,CAAIG,OAAO,CAACC,QAAQ,CAACH,QAAA,CAASI,aAAa;EACpD;EAEA,IAAsCC,eAAA,GAAAC,gBAAA,CAAAZ,KAAA,CAAMa,QAAQ,CAAUN,aAAA;IAAvDO,WAAA,GAA+BH,eAAA;IAAlBI,cAAA,GAAkBJ,eAAA;EAEtC,IAAMK,QAAA,GAAW,SAAAA,CAAA;IACf,IAAMC,KAAA,GAAQV,aAAA;IACdU,KAAA,KAAUH,WAAA,IAAeC,cAAA,CAAeE,KAAA;EAC1C;EAEA;EACAf,yBAAA,CAA0Bc,QAAA,EAAU,EAAE;EAEtCb,sBAAA,CAAuBG,QAAA,EAAU,SAASU,QAAA,EAAU;IAAEE,OAAA,EAAS;EAAK;EACpEf,sBAAA,CAAuBG,QAAA,EAAU,QAAQU,QAAA,EAAU;IAAEE,OAAA,EAAS;EAAK;EAEnE,OAAOJ,WAAA;AACT"},"metadata":{},"sourceType":"module"}