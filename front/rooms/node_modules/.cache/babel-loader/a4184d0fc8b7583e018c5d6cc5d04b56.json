{"ast":null,"code":"import { _ as _to_consumable_array } from \"@swc/helpers/_/_to_consumable_array\";\nimport { uniqueArrayFallback } from \"./internal/uniqueArray\";\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength) {\n  var startIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  return new Array(arrayLength).fill(null).map(function (_, index) {\n    return startIndex + index;\n  });\n}\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (typeof Set !== \"undefined\") {\n    return Array.from(new Set(array));\n  }\n  return uniqueArrayFallback(array);\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray(array, size) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (!size) {\n    return [array];\n  }\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_to_consumable_array(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n    value = arguments.length > 1 ? arguments[1] : void 0;\n  var index = array.indexOf(value);\n  if (index < 0) {\n    return array;\n  } else {\n    return _to_consumable_array(array.slice(0, index)).concat(_to_consumable_array(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [],\n    array2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}","map":{"version":3,"names":["uniqueArrayFallback","createArray","arrayLength","startIndex","arguments","length","Array","fill","map","_","index","sumArray","array","isArray","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","concat","_to_consumable_array","omitFromArray","value","indexOf","difference","array1","array2","res","item","includes","push"],"sources":["../../src/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ;AAEpC;;;;;;AAMA,OAAO,SAASC,YAAYC,WAAmB;MAAEC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAa;EAC5D,OAAO,IAAIE,KAAA,CAAMJ,WAAA,EAAaK,IAAI,CAAC,MAAMC,GAAG,CAAC,UAACC,CAAA,EAAGC,KAAA;WAAUP,UAAA,GAAaO,KAAA;;AAC1E;AAEA;;;AAGA,OAAO,SAASC,SAASC,KAAe;EACtC,IAAI,CAACN,KAAA,CAAMO,OAAO,CAACD,KAAA,KAAU,CAACA,KAAA,CAAMP,MAAM,EAAE;IAC1C,OAAO;EACT;EACA,OAAOO,KAAA,CAAME,MAAM,CAAC,UAACC,QAAA,EAAUC,OAAA;WAAYA,OAAA,GAAUD,QAAA;;AACvD;AAEA;;;AAGA,OAAO,SAASE,aAAaL,KAAe;EAC1C,IAAI,CAACN,KAAA,CAAMO,OAAO,CAACD,KAAA,KAAU,CAACA,KAAA,CAAMP,MAAM,EAAE;IAC1C,OAAO;EACT;EACA,OAAOM,QAAA,CAASC,KAAA,IAASA,KAAA,CAAMP,MAAM;AACvC;AAEA;;;AAGA,OAAO,SAASa,YAAeN,KAAU;EACvC,IAAI,CAACN,KAAA,CAAMO,OAAO,CAACD,KAAA,KAAU,CAACA,KAAA,CAAMP,MAAM,EAAE;IAC1C,OAAO,EAAE;EACX;EAEA,IAAI,OAAOc,GAAA,KAAQ,aAAa;IAC9B,OAAOb,KAAA,CAAMc,IAAI,CAAC,IAAID,GAAA,CAAIP,KAAA;EAC5B;EAEA,OAAOZ,mBAAA,CAAoBY,KAAA;AAC7B;AAEA;;;AAGA,OAAO,SAASS,aAAgBT,KAAU;EACxC,OAAOA,KAAA,CACJJ,GAAG,CAAc,UAACc,CAAA;WAAM,CAACC,IAAA,CAAKC,MAAM,IAAIF,CAAA,CAAE;KAC1CG,IAAI,CAAC,UAACH,CAAA,EAAGI,CAAA;WAAMJ,CAAC,CAAC,EAAE,GAAGI,CAAC,CAAC,EAAE;KAC1BlB,GAAG,CAAI,UAACc,CAAA;WAAMA,CAAC,CAAC,EAAE;;AACvB;AAEA;;;AAGA,OAAO,SAASK,WAAcf,KAAU,EAAEgB,IAAY;EACpD,IAAI,CAACtB,KAAA,CAAMO,OAAO,CAACD,KAAA,KAAU,CAACA,KAAA,CAAMP,MAAM,EAAE;IAC1C,OAAO,EAAE;EACX;EAEA,IAAI,CAACuB,IAAA,EAAM;IACT,OAAO,CAAChB,KAAA,CAAM;EAChB;EAEA,IAAMiB,IAAA,GAAOjB,KAAA,CAAMkB,KAAK,CAAC,GAAGF,IAAA;EAC5B,IAAMG,IAAA,GAAOnB,KAAA,CAAMkB,KAAK,CAACF,IAAA;EAEzB,OAAO,CAACC,IAAA,CAAgC,CAAjCG,MAAA,CAAOC,oBAAA,CAAGN,UAAA,CAAWI,IAAA,EAAMH,IAAA;AACpC;AAEA;;;;;;;;;AASA,OAAO,SAASM,cAAA;MAAiBtB,KAAA,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAa,EAAE;IAAE+B,KAAA,GAAA/B,SAAA,CAAAC,MAAA,OAAAD,SAAA;EAChD,IAAMM,KAAA,GAAQE,KAAA,CAAMwB,OAAO,CAACD,KAAA;EAE5B,IAAIzB,KAAA,GAAQ,GAAG;IACb,OAAOE,KAAA;EACT,OAAO;IACL,OAAOqB,oBAAC,CAAGrB,KAAA,CAAMkB,KAAK,CAAC,GAAGpB,KAAA,GAAAsB,MAAA,CAAQC,oBAAA,CAAGrB,KAAA,CAAMkB,KAAK,CAACpB,KAAA,GAAQ;EAC3D;AACF;AAEA;;;;;;;;;;AAUA,OAAO,SAAS2B,WAAA;MAAcC,MAAA,GAAAlC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAc,EAAE;IAAEmC,MAAA,GAAAnC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAAc,EAAE;EAC9D,OAAOkC,MAAA,CAAOxB,MAAM,CAAM,UAAC0B,GAAA,EAAKC,IAAA;IAC9B,IAAI,CAACF,MAAA,CAAOG,QAAQ,CAACD,IAAA,GAAO;MAC1BD,GAAA,CAAIG,IAAI,CAACF,IAAA;IACX;IACA,OAAOD,GAAA;EACT,GAAG,EAAE;AACP"},"metadata":{},"sourceType":"module"}