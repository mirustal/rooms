{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nfunction parse(query) {\n  if (typeof query !== \"string\") {\n    return {};\n  }\n  query = query.trim().replace(/^[?#&]/, \"\");\n  if (!query) {\n    return {};\n  }\n  var matches = /\\?(.+)$/gi.exec(query);\n  var str = matches ? matches[1] : query;\n  return str.split(\"&\").reduce(function (acc, item) {\n    var param = item.split(\"=\");\n    if (param[1]) {\n      acc[param[0]] = decodeURIComponent(param[1]);\n    }\n    return acc;\n  }, {});\n}\n/**\n   * URL encode the keys and values\n   *\n   * @default true\n   */ /**\n      * Skip keys with `null` as the value.\n      * Keys with `undefined` as the value are always ignored.\n      *\n      * @default true\n      */\nfunction stringify(data) {\n  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n  if (typeof data !== \"object\" || data === null) {\n    return \"\";\n  }\n  options = _object_spread({\n    encode: true\n  }, options);\n  var encode = function (value) {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n  return Object.keys(data).reduce(function (acc, key) {\n    var value = data[key];\n    if (value === undefined) {\n      return acc;\n    }\n    if (value === null) {\n      if (!options.skipNull) {\n        acc.push([encode(key), \"\"].join(\"=\"));\n      }\n      return acc;\n    }\n    if (Array.isArray(value)) {\n      value.map(function (arrayItem) {\n        acc.push(\"\".concat(encode(key), \"[]=\").concat(encode(arrayItem)));\n      }).join();\n      return acc;\n    }\n    acc.push([encode(key), encode(value)].join(\"=\"));\n    return acc;\n  }, []).join(\"&\");\n}\nexport var querystring = {\n  parse: parse,\n  stringify: stringify\n};","map":{"version":3,"names":["parse","query","trim","replace","matches","exec","str","split","reduce","acc","item","param","decodeURIComponent","stringify","data","options","arguments","length","_object_spread","encode","value","encodeURIComponent","String","Object","keys","key","undefined","skipNull","push","join","Array","isArray","map","arrayItem","concat","querystring"],"sources":["../../src/querystring.ts"],"sourcesContent":["export interface ParsedQuery<T = string> {\n  [key: string]: T | T[] | null;\n}\n\nfunction parse(query: string | any): ParsedQuery {\n  if (typeof query !== 'string') {\n    return {};\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return {};\n  }\n\n  const matches = /\\?(.+)$/gi.exec(query);\n  const str = matches ? matches[1] : query;\n\n  return str.split('&').reduce((acc: ParsedQuery, item: string) => {\n    const param = item.split('=');\n\n    if (param[1]) {\n      acc[param[0]] = decodeURIComponent(param[1]);\n    }\n\n    return acc;\n  }, {});\n}\n\ntype StringifyQueryItem = string | boolean | number | null | undefined;\n\ntype StringifyQuery = Record<string, StringifyQueryItem | readonly StringifyQueryItem[]>;\n\ninterface StringifyOptions {\n  /**\n   * URL encode the keys and values\n   *\n   * @default true\n   */\n  encode?: boolean;\n\n  /**\n   * Skip keys with `null` as the value.\n   * Keys with `undefined` as the value are always ignored.\n   *\n   * @default true\n   */\n  skipNull?: true;\n}\n\nfunction stringify(data: StringifyQuery, options: StringifyOptions = {}): string {\n  if (typeof data !== 'object' || data === null) {\n    return '';\n  }\n\n  options = {\n    encode: true,\n    ...options,\n  };\n\n  const encode = (value: any): string => {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n\n  return Object.keys(data)\n    .reduce<string[]>((acc, key) => {\n      const value = data[key];\n\n      if (value === undefined) {\n        return acc;\n      }\n\n      if (value === null) {\n        if (!options.skipNull) {\n          acc.push([encode(key), ''].join('='));\n        }\n\n        return acc;\n      }\n\n      if (Array.isArray(value)) {\n        value\n          .map((arrayItem) => {\n            acc.push(`${encode(key)}[]=${encode(arrayItem)}`);\n          })\n          .join();\n        return acc;\n      }\n\n      acc.push([encode(key), encode(value)].join('='));\n      return acc;\n    }, [])\n    .join('&');\n}\n\nexport const querystring = {\n  parse,\n  stringify,\n};\n"],"mappings":";AAIA,SAASA,MAAMC,KAAmB;EAChC,IAAI,OAAOA,KAAA,KAAU,UAAU;IAC7B,OAAO,CAAC;EACV;EAEAA,KAAA,GAAQA,KAAA,CAAMC,IAAI,GAAGC,OAAO,CAAC,UAAU;EACvC,IAAI,CAACF,KAAA,EAAO;IACV,OAAO,CAAC;EACV;EAEA,IAAMG,OAAA,GAAU,YAAYC,IAAI,CAACJ,KAAA;EACjC,IAAMK,GAAA,GAAMF,OAAA,GAAUA,OAAO,CAAC,EAAE,GAAGH,KAAA;EAEnC,OAAOK,GAAA,CAAIC,KAAK,CAAC,KAAKC,MAAM,CAAC,UAACC,GAAA,EAAkBC,IAAA;IAC9C,IAAMC,KAAA,GAAQD,IAAA,CAAKH,KAAK,CAAC;IAEzB,IAAII,KAAK,CAAC,EAAE,EAAE;MACZF,GAAG,CAACE,KAAK,CAAC,EAAE,CAAC,GAAGC,kBAAA,CAAmBD,KAAK,CAAC,EAAE;IAC7C;IAEA,OAAOF,GAAA;EACT,GAAG,CAAC;AACN;AAOE;;;;KAAA,CAOA;;;;;;AASF,SAASI,UAAUC,IAAoB;MAAEC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,iBAAAA,SAAA,MAA4B,CAAC;EACpE,IAAI,OAAOF,IAAA,KAAS,YAAYA,IAAA,KAAS,MAAM;IAC7C,OAAO;EACT;EAEAC,OAAA,GAAUG,cAAA;IACRC,MAAA,EAAQ;KACLJ,OAAA;EAGL,IAAMI,MAAA,GAAS,SAAAA,CAACC,KAAA;IACd,OAAOL,OAAA,CAAQI,MAAM,GAAGE,kBAAA,CAAmBD,KAAA,IAASE,MAAA,CAAOF,KAAA;EAC7D;EAEA,OAAOG,MAAA,CAAOC,IAAI,CAACV,IAAA,EAChBN,MAAM,CAAW,UAACC,GAAA,EAAKgB,GAAA;IACtB,IAAML,KAAA,GAAQN,IAAI,CAACW,GAAA,CAAI;IAEvB,IAAIL,KAAA,KAAUM,SAAA,EAAW;MACvB,OAAOjB,GAAA;IACT;IAEA,IAAIW,KAAA,KAAU,MAAM;MAClB,IAAI,CAACL,OAAA,CAAQY,QAAQ,EAAE;QACrBlB,GAAA,CAAImB,IAAI,CAAC,CAACT,MAAA,CAAOM,GAAA,GAAM,GAAG,CAACI,IAAI,CAAC;MAClC;MAEA,OAAOpB,GAAA;IACT;IAEA,IAAIqB,KAAA,CAAMC,OAAO,CAACX,KAAA,GAAQ;MACxBA,KAAA,CACGY,GAAG,CAAC,UAACC,SAAA;QACJxB,GAAA,CAAImB,IAAI,CAAC,EAAC,CAAmBM,MAAA,CAAjBf,MAAA,CAAOM,GAAA,GAAK,OAAuBS,MAAA,CAAlBf,MAAA,CAAOc,SAAA;MACtC,GACCJ,IAAI;MACP,OAAOpB,GAAA;IACT;IAEAA,GAAA,CAAImB,IAAI,CAAC,CAACT,MAAA,CAAOM,GAAA,GAAMN,MAAA,CAAOC,KAAA,EAAO,CAACS,IAAI,CAAC;IAC3C,OAAOpB,GAAA;EACT,GAAG,EAAE,EACJoB,IAAI,CAAC;AACV;AAEA,OAAO,IAAMM,WAAA,GAAc;EACzBnC,KAAA,EAAAA,KAAA;EACAa,SAAA,EAAAA;AACF"},"metadata":{},"sourceType":"module"}