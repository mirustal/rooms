{"ast":null,"code":"import { _ as _define_property } from \"@swc/helpers/_/_define_property\";\nimport * as React from \"react\";\nimport { warnOnce } from \"../lib/warnOnce\";\nimport { useEffectDev } from \"./useEffectDev\";\nimport { useExternRef } from \"./useExternRef\";\nvar isDOMTypeElement = function (element) {\n  return typeof element.type === \"string\";\n};\nvar warn = warnOnce(\"usePatchChildrenRef\");\nexport var usePatchChildrenRef = function (children) {\n  var childRef = React.isValidElement(children) && (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n  var patchedRef = useExternRef(childRef);\n  useEffectDev(function () {\n    if (!patchedRef.current) {\n      warn(\"Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента\", \"error\");\n    }\n  }, [children === null || children === void 0 ? void 0 : children.type, patchedRef]);\n  return [patchedRef, React.isValidElement(children) ? React.cloneElement(children, _define_property({}, isDOMTypeElement(children) ? \"ref\" : \"getRootRef\", patchedRef)) : children];\n};","map":{"version":3,"names":["React","warnOnce","useEffectDev","useExternRef","isDOMTypeElement","element","type","warn","usePatchChildrenRef","children","childRef","isValidElement","ref","props","getRootRef","patchedRef","current","cloneElement","_define_property"],"sources":["../../src/hooks/usePatchChildrenRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { warnOnce } from '../lib/warnOnce';\nimport { useEffectDev } from './useEffectDev';\nimport { useExternRef } from './useExternRef';\n\ntype ChildrenElement<T> = React.ReactElement<{ getRootRef?: React.Ref<T> }>;\n\nconst isDOMTypeElement = (element: React.ReactElement): element is React.DOMElement<any, any> => {\n  return typeof element.type === 'string';\n};\n\nconst warn = warnOnce('usePatchChildrenRef');\n\nexport const usePatchChildrenRef = <T = HTMLElement>(\n  children?: ChildrenElement<T>,\n): [React.MutableRefObject<T | null>, ChildrenElement<T> | undefined] => {\n  const childRef =\n    React.isValidElement(children) &&\n    (isDOMTypeElement(children) ? (children.ref as React.Ref<T>) : children.props.getRootRef);\n  const patchedRef = useExternRef<T>(childRef);\n\n  useEffectDev(() => {\n    if (!patchedRef.current) {\n      warn(\n        'Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента',\n        'error',\n      );\n    }\n  }, [children?.type, patchedRef]);\n\n  return [\n    patchedRef,\n    React.isValidElement(children)\n      ? React.cloneElement(children, {\n          [isDOMTypeElement(children) ? 'ref' : 'getRootRef']: patchedRef,\n        })\n      : children,\n  ];\n};\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,QAAQ,QAAQ;AACzB,SAASC,YAAY,QAAQ;AAC7B,SAASC,YAAY,QAAQ;AAI7B,IAAMC,gBAAA,GAAmB,SAAAA,CAACC,OAAA;EACxB,OAAO,OAAOA,OAAA,CAAQC,IAAI,KAAK;AACjC;AAEA,IAAMC,IAAA,GAAON,QAAA,CAAS;AAEtB,OAAO,IAAMO,mBAAA,GAAsB,SAAAA,CACjCC,QAAA;EAEA,IAAMC,QAAA,GACJV,KAAA,CAAMW,cAAc,CAACF,QAAA,MACpBL,gBAAA,CAAiBK,QAAA,IAAaA,QAAA,CAASG,GAAG,GAAoBH,QAAA,CAASI,KAAK,CAACC,UAAU,CAAD;EACzF,IAAMC,UAAA,GAAaZ,YAAA,CAAgBO,QAAA;EAEnCR,YAAA,CAAa;IACX,IAAI,CAACa,UAAA,CAAWC,OAAO,EAAE;MACvBT,IAAA,CACE,4JACA;IAEJ;EACF,GAAG,CAACE,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAUH,IAAI,EAAES,UAAA,CAAW;EAE/B,OAAO,CACLA,UAAA,EACAf,KAAA,CAAMW,cAAc,CAACF,QAAA,IACjBT,KAAA,CAAMiB,YAAY,CAACR,QAAA,EACjBS,gBAAA,KAACd,gBAAA,CAAiBK,QAAA,IAAY,QAAQ,cAAeM,UAAA,KAEvDN,QAAA,CACL;AACH"},"metadata":{},"sourceType":"module"}