{"ast":null,"code":"import * as React from \"react\";\nexport var FOCUSABLE_ELEMENTS_LIST = [\"a[href]\", \"area[href]\", 'input:not([disabled]):not([hidden]):not([type=\"hidden\"]):not([aria-hidden])', \"select:not([disabled]):not([hidden]):not([aria-hidden])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"iframe\", \"audio\", \"video\", \"[contenteditable]\", '[tabindex]:not([tabindex=\"-1\"])'];\nexport var Keys;\n(function (Keys) {\n  Keys[\"ENTER\"] = \"Enter\";\n  Keys[\"SPACE\"] = \"Space\";\n  Keys[\"TAB\"] = \"Tab\";\n  Keys[\"ESCAPE\"] = \"Escape\";\n  Keys[\"HOME\"] = \"Home\";\n  Keys[\"END\"] = \"End\";\n  Keys[\"ARROW_LEFT\"] = \"ArrowLeft\";\n  Keys[\"ARROW_RIGHT\"] = \"ArrowRight\";\n  Keys[\"ARROW_UP\"] = \"ArrowUp\";\n  Keys[\"ARROW_DOWN\"] = \"ArrowDown\";\n  Keys[\"PAGE_UP\"] = \"PageUp\";\n  Keys[\"PAGE_DOWN\"] = \"PageDown\";\n})(Keys || (Keys = {}));\nvar ACCESSIBLE_KEYS = [{\n  code: \"Enter\",\n  key: [\"Enter\"],\n  keyCode: 13\n}, {\n  code: \"Space\",\n  key: [\"Space\", \"Spacebar\", \" \"],\n  keyCode: 32\n}, {\n  code: \"Tab\",\n  key: [\"Tab\"],\n  keyCode: 9\n}, {\n  code: \"Escape\",\n  key: [\"Escape\"],\n  keyCode: 27\n}, {\n  code: \"Home\",\n  key: [\"Home\"],\n  keyCode: 36\n}, {\n  code: \"End\",\n  key: [\"End\"],\n  keyCode: 35\n}, {\n  code: \"ArrowLeft\",\n  key: [\"ArrowLeft\"],\n  keyCode: 37\n}, {\n  code: \"ArrowRight\",\n  key: [\"ArrowRight\"],\n  keyCode: 39\n}, {\n  code: \"ArrowUp\",\n  key: [\"ArrowUp\"],\n  keyCode: 40\n}, {\n  code: \"ArrowDown\",\n  key: [\"ArrowDown\"],\n  keyCode: 40\n}, {\n  code: \"PageUp\",\n  key: [\"PageUp\"],\n  keyCode: 40\n}, {\n  code: \"PageDown\",\n  key: [\"PageDown\"],\n  keyCode: 40\n}];\nexport function pressedKey(e) {\n  var _ACCESSIBLE_KEYS_find;\n  return ((_ACCESSIBLE_KEYS_find = ACCESSIBLE_KEYS.find(function (param) {\n    var key = param.key,\n      keyCode = param.keyCode;\n    return key.includes(e.key) || keyCode === e.keyCode;\n  })) === null || _ACCESSIBLE_KEYS_find === void 0 ? void 0 : _ACCESSIBLE_KEYS_find.code) || null;\n}\nexport function shouldTriggerClickOnEnterOrSpace(e) {\n  var el = e.target;\n  var tagName = el.tagName;\n  var role = el.getAttribute(\"role\");\n  var isValidKeyboardEventTarget = el.isContentEditable !== true && tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && (role === \"button\" || role === \"link\");\n  var isNativeAnchorEl = tagName === \"A\" && el.hasAttribute(\"href\");\n  var keyPressed = pressedKey(e);\n  return isValidKeyboardEventTarget && (\n  // trigger buttons on Space\n  keyPressed === \"Space\" && role === \"button\" ||\n  // trigger non-native links and buttons on Enter\n  keyPressed === \"Enter\" && !isNativeAnchorEl);\n}","map":{"version":3,"names":["React","FOCUSABLE_ELEMENTS_LIST","Keys","ACCESSIBLE_KEYS","code","key","keyCode","pressedKey","e","_ACCESSIBLE_KEYS_find","find","param","includes","shouldTriggerClickOnEnterOrSpace","el","target","tagName","role","getAttribute","isValidKeyboardEventTarget","isContentEditable","isNativeAnchorEl","hasAttribute","keyPressed"],"sources":["../../src/lib/accessibility.ts"],"sourcesContent":["import * as React from 'react';\n\nexport const FOCUSABLE_ELEMENTS_LIST = [\n  'a[href]',\n  'area[href]',\n  'input:not([disabled]):not([hidden]):not([type=\"hidden\"]):not([aria-hidden])',\n  'select:not([disabled]):not([hidden]):not([aria-hidden])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'iframe',\n  'audio',\n  'video',\n  '[contenteditable]',\n  '[tabindex]:not([tabindex=\"-1\"])',\n];\n\nexport enum Keys {\n  ENTER = 'Enter',\n  SPACE = 'Space',\n  TAB = 'Tab',\n  ESCAPE = 'Escape',\n  HOME = 'Home',\n  END = 'End',\n  ARROW_LEFT = 'ArrowLeft',\n  ARROW_RIGHT = 'ArrowRight',\n  ARROW_UP = 'ArrowUp',\n  ARROW_DOWN = 'ArrowDown',\n  PAGE_UP = 'PageUp',\n  PAGE_DOWN = 'PageDown',\n}\n\ninterface AccessibleKey {\n  code: Keys;\n  key: string[];\n  keyCode: number;\n}\n\nconst ACCESSIBLE_KEYS: AccessibleKey[] = [\n  {\n    code: Keys.ENTER,\n    key: ['Enter'],\n    keyCode: 13,\n  },\n  {\n    code: Keys.SPACE,\n    key: ['Space', 'Spacebar', ' '],\n    keyCode: 32,\n  },\n  {\n    code: Keys.TAB,\n    key: ['Tab'],\n    keyCode: 9,\n  },\n  {\n    code: Keys.ESCAPE,\n    key: ['Escape'],\n    keyCode: 27,\n  },\n  {\n    code: Keys.HOME,\n    key: ['Home'],\n    keyCode: 36,\n  },\n  {\n    code: Keys.END,\n    key: ['End'],\n    keyCode: 35,\n  },\n  {\n    code: Keys.ARROW_LEFT,\n    key: ['ArrowLeft'],\n    keyCode: 37,\n  },\n  {\n    code: Keys.ARROW_RIGHT,\n    key: ['ArrowRight'],\n    keyCode: 39,\n  },\n  {\n    code: Keys.ARROW_UP,\n    key: ['ArrowUp'],\n    keyCode: 40,\n  },\n  {\n    code: Keys.ARROW_DOWN,\n    key: ['ArrowDown'],\n    keyCode: 40,\n  },\n  {\n    code: Keys.PAGE_UP,\n    key: ['PageUp'],\n    keyCode: 40,\n  },\n  {\n    code: Keys.PAGE_DOWN,\n    key: ['PageDown'],\n    keyCode: 40,\n  },\n];\n\nexport function pressedKey(e: KeyboardEvent | React.KeyboardEvent<HTMLElement>) {\n  return (\n    ACCESSIBLE_KEYS.find(({ key, keyCode }) => key.includes(e.key) || keyCode === e.keyCode)\n      ?.code || null\n  );\n}\n\nexport function shouldTriggerClickOnEnterOrSpace(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLElement>,\n) {\n  const el = e.target as HTMLElement;\n  const { tagName } = el;\n\n  const role = el.getAttribute('role');\n\n  const isValidKeyboardEventTarget: boolean =\n    el.isContentEditable !== true &&\n    tagName !== 'INPUT' &&\n    tagName !== 'TEXTAREA' &&\n    (role === 'button' || role === 'link');\n\n  const isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  const keyPressed = pressedKey(e);\n\n  return (\n    isValidKeyboardEventTarget &&\n    // trigger buttons on Space\n    ((keyPressed === Keys.SPACE && role === 'button') ||\n      // trigger non-native links and buttons on Enter\n      (keyPressed === Keys.ENTER && !isNativeAnchorEl))\n  );\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AAEvB,OAAO,IAAMC,uBAAA,GAA0B,CACrC,WACA,cACA,+EACA,2DACA,4BACA,0BACA,UACA,SACA,SACA,qBACA,kCACD;;WAEWC,IAAA;;;;;;;;;;;;;GAAAA,IAAA,KAAAA,IAAA;AAqBZ,IAAMC,eAAA,GAAmC,CACvC;EACEC,IAAI;EACJC,GAAA,EAAK,CAAC,QAAQ;EACdC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,SAAS,YAAY,IAAI;EAC/BC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,MAAM;EACZC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,SAAS;EACfC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,OAAO;EACbC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,MAAM;EACZC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,YAAY;EAClBC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,aAAa;EACnBC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,UAAU;EAChBC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,YAAY;EAClBC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,SAAS;EACfC,OAAA,EAAS;AACX,GACA;EACEF,IAAI;EACJC,GAAA,EAAK,CAAC,WAAW;EACjBC,OAAA,EAAS;AACX,EACD;AAED,OAAO,SAASC,WAAWC,CAAmD;MAE1EC,qBAAA;EADF,OACE,EAAAA,qBAAA,GAAAN,eAAA,CAAgBO,IAAI,CAAC,UAAAC,KAAA;QAAGN,GAAA,GAAAM,KAAA,CAAAN,GAAA;MAAKC,OAAA,GAAAK,KAAA,CAAAL,OAAA;WAAcD,GAAA,CAAIO,QAAQ,CAACJ,CAAA,CAAEH,GAAG,KAAKC,OAAA,KAAYE,CAAA,CAAEF,OAAO;kBAAvFG,qBAAA,uBAAAA,qBAAA,CACIL,IAAI,KAAI;AAEhB;AAEA,OAAO,SAASS,iCACdL,CAAmD;EAEnD,IAAMM,EAAA,GAAKN,CAAA,CAAEO,MAAM;EACnB,IAAMC,OAAE,GAAYF,EAAA,CAAZE,OAAA;EAER,IAAMC,IAAA,GAAOH,EAAA,CAAGI,YAAY,CAAC;EAE7B,IAAMC,0BAAA,GACJL,EAAA,CAAGM,iBAAiB,KAAK,QACzBJ,OAAA,KAAY,WACZA,OAAA,KAAY,eACXC,IAAA,KAAS,YAAYA,IAAA,KAAS,MAAK;EAEtC,IAAMI,gBAAA,GAAmBL,OAAA,KAAY,OAAOF,EAAA,CAAGQ,YAAY,CAAC;EAC5D,IAAMC,UAAA,GAAahB,UAAA,CAAWC,CAAA;EAE9B,OACEW,0BAAA;EACA;EACCI,UAAC,gBAA6BN,IAAA,KAAS;EACtC;EACCM,UAAA,gBAA6B,CAACF,gBAAgB;AAErD"},"metadata":{},"sourceType":"module"}