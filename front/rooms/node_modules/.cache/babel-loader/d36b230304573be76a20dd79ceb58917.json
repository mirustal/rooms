{"ast":null,"code":"/**\n * ease function\n * @param x absolute progress of the animation in bounds 0 (beginning) and 1 (end)\n */export function easeInOutSine(x) {\n  return 0.5 * (1 - Math.cos(Math.PI * x));\n}\nexport function cubicBezier(x1, x2) {\n  return function (progress) {\n    var t = progress;\n    var cx = 3 * x1;\n    var bx = 3 * (x2 - x1) - cx;\n    var ax = 1 - cx - bx;\n    var x = ax * Math.pow(t, 3) + bx * Math.pow(t, 2) + cx * t;\n    return x;\n  };\n}","map":{"version":3,"names":["easeInOutSine","x","Math","cos","PI","cubicBezier","x1","x2","progress","t","cx","bx","ax","pow"],"sources":["../../src/lib/fx.ts"],"sourcesContent":["/**\n * ease function\n * @param x absolute progress of the animation in bounds 0 (beginning) and 1 (end)\n */\nexport function easeInOutSine(x: number) {\n  return 0.5 * (1 - Math.cos(Math.PI * x));\n}\n\nexport function cubicBezier(x1: number, x2: number) {\n  return function (progress: number) {\n    const t = progress;\n    const cx = 3 * x1;\n    const bx = 3 * (x2 - x1) - cx;\n    const ax = 1 - cx - bx;\n    const x = ax * Math.pow(t, 3) + bx * Math.pow(t, 2) + cx * t;\n    return x;\n  };\n}\n"],"mappings":"AAAA;;;GAIA,OAAO,SAASA,cAAcC,CAAS;EACrC,OAAO,OAAO,IAAIC,IAAA,CAAKC,GAAG,CAACD,IAAA,CAAKE,EAAE,GAAGH,CAAA,CAAC;AACxC;AAEA,OAAO,SAASI,YAAYC,EAAU,EAAEC,EAAU;EAChD,OAAO,UAAUC,QAAgB;IAC/B,IAAMC,CAAA,GAAID,QAAA;IACV,IAAME,EAAA,GAAK,IAAIJ,EAAA;IACf,IAAMK,EAAA,GAAK,KAAKJ,EAAA,GAAKD,EAAC,IAAKI,EAAA;IAC3B,IAAME,EAAA,GAAK,IAAIF,EAAA,GAAKC,EAAA;IACpB,IAAMV,CAAA,GAAIW,EAAA,GAAKV,IAAA,CAAKW,GAAG,CAACJ,CAAA,EAAG,KAAKE,EAAA,GAAKT,IAAA,CAAKW,GAAG,CAACJ,CAAA,EAAG,KAAKC,EAAA,GAAKD,CAAA;IAC3D,OAAOR,CAAA;EACT;AACF"},"metadata":{},"sourceType":"module"}